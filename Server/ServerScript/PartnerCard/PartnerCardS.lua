PartnerCard.POS_TYPE_VISIT_PRIOR = 1
PartnerCard.POS_TYPE_VISIT_DEFAULT = 2
PartnerCard.POS_TYPE_LIVE_PRIOR = 3
PartnerCard.tbNpcPos = 
{
	[4000] = {
		{ 											-- 拜访优先点
			{3883,18453},
			{5300,18080},
			{3422,18631},
			{4588,19165},
			{4149,17276},
			{4374,17928},
			{4263,17076},
			{3883,18834},
			{3567,17504},
			{5620,18372},
			{5482,17954},
			{4463,18326},
			{5429,18244},
			{3133,17201},
			{3367,17604},
			{4196,18913},
			{5239,17543},
			{5572,17135},
			{5595,17532},
			{4026,18723},
			{3536,18477},
			{3550,17184},
			{5387,17458},
			{3726,17176},
			{4054,17137},
			{4385,16717},
			{3731,18651},
			{4806,18185},
			{5618,17794},
			{4950,18075},
			{4126,17727},
			{3540,18827},
			{5290,17170},
			{5096,18196},
			{4206,18573},
			{5219,16674},
			{3801,17788},
			{3787,18333},
			{3909,18152},
			{3386,17201},
			{4794,19391},
			{5572,16896},
			{3612,17347},
			{3428,17398},
			{5267,17885},
			{3718,18154},
			{4801,16443},
			{4263,18075},
			{4515,17760},
			{4216,17474},
			{4381,19167},
			{4806,16667},
			{3268,18250},
			{5008,16589},
			{4041,16939},
			{5267,18837},
			{4801,16880},
			{5356,18431},
			{5003,16759},
			{5378,16725},
			{3467,17012},
			{5387,18927},
			{4179,19179},
			{4687,19240},
			{5217,16464},
			{5775,17673},
			{3817,17343},
			{5714,18525},
			{3442,18100},
			{4792,17936},
			{3531,17922},
			{5103,17954},
			{4007,17504},
			{5700,18927},
			{4141,18233},
			{5568,17279},
			{5377,17716},
			{3826,16864},
			{4788,17746},
			{4327,17749},
			{4573,19418},
			{3726,17955},
			{4955,19136},
			{5181,18383},
			{3748,17565},
			{3591,17739},
			{4354,19043},
			{5384,18584},
			{3986,17296},
			{3224,17007},
			{3153,18086},
			{3139,17385},
			{5215,16884},
			{5864,17128},
			{5759,17376},
			{5387,16925},
			{5223,19060},
			{4605,18075},
			{5604,18673},
			{3265,17351},
			{4594,16909},
			{5087,17736},
			{5604,18122},
			{3629,16980},
			{4374,16884},
			{3292,17910},
			{3938,17660},
			{4814,18350},
			{3979,17945},
			{3637,18317},
			{4585,16756},
			{4207,16887},
			{4471,19293},
			{4073,18428},
			{3442,18333},
			{3884,17056},
			{4054,16764},


		};
		{ 											-- 拜访保险点
			{2114,18405},
			{2352,18403},
			{2126,18024},
			{2362,18021},
			{2219,18385},
			{2230,18037},
			{2486,18354},
			{2486,18017},
			
		};
		{ 											-- 入住优先点
			{3883,18453},
			{5300,18080},
			{3422,18631},
			{4588,19165},
			{4149,17276},
			{4374,17928},
			{4263,17076},
			{3883,18834},
			{3567,17504},
			{5620,18372},
			{5482,17954},
			{4463,18326},
			{5429,18244},
			{3133,17201},
			{3367,17604},
			{4196,18913},
			{5239,17543},
			{5572,17135},
			{5595,17532},
			{4026,18723},
			{3536,18477},
			{3550,17184},
			{5387,17458},
			{3726,17176},
			{4054,17137},
			{4385,16717},
			{3731,18651},
			{4806,18185},
			{5618,17794},
			{4950,18075},
			{4126,17727},
			{3540,18827},
			{5290,17170},
			{5096,18196},
			{4206,18573},
			{5219,16674},
			{3801,17788},
			{3787,18333},
			{3909,18152},
			{3386,17201},
			{4794,19391},
			{5572,16896},
			{3612,17347},
			{3428,17398},
			{5267,17885},
			{3718,18154},
			{4801,16443},
			{4263,18075},
			{4515,17760},
			{4216,17474},
			{4381,19167},
			{4806,16667},
			{3268,18250},
			{5008,16589},
			{4041,16939},
			{5267,18837},
			{4801,16880},
			{5356,18431},
			{5003,16759},
			{5378,16725},
			{3467,17012},
			{5387,18927},
			{4179,19179},
			{4687,19240},
			{5217,16464},
			{5775,17673},
			{3817,17343},
			{5714,18525},
			{3442,18100},
			{4792,17936},
			{3531,17922},
			{5103,17954},
			{4007,17504},
			{5700,18927},
			{4141,18233},
			{5568,17279},
			{5377,17716},
			{3826,16864},
			{4788,17746},
			{4327,17749},
			{4573,19418},
			{3726,17955},
			{4955,19136},
			{5181,18383},
			{3748,17565},
			{3591,17739},
			{4354,19043},
			{5384,18584},
			{3986,17296},
			{3224,17007},
			{3153,18086},
			{3139,17385},
			{5215,16884},
			{5864,17128},
			{5759,17376},
			{5387,16925},
			{5223,19060},
			{4605,18075},
			{5604,18673},
			{3265,17351},
			{4594,16909},
			{5087,17736},
			{5604,18122},
			{3629,16980},
			{4374,16884},
			{3292,17910},
			{3938,17660},
			{4814,18350},
			{3979,17945},
			{3637,18317},
			{4585,16756},
			{4207,16887},
			{4471,19293},
			{4073,18428},
			{3442,18333},
			{3884,17056},
			{4054,16764},
		};
	},
	[4001] = {
		{
			{5533,18705},
			{4853,18128},
			{4632,19809},
			{4327,20372},
			{4515,20311},
			{5050,20344},
			{4247,17414},
			{5683,18194},
			{4801,16560},
			{5388,16612},
			{5045,18273},
			{4651,19330},
			{4073,20733},
			{5514,17166},
			{4364,19926},
			{5744,17062},
			{4271,20541},
			{4843,17865},
			{3562,17443},
			{4233,21142},
			{3731,20968},
			{4228,16795},
			{3585,17964},
			{4571,19527},
			{3998,20954},
			{4806,16823},
			{4275,18522},
			{3449,18795},
			{3402,18443},
			{3210,17372},
			{4078,20602},
			{6003,17184},
			{5543,18405},
			{4857,19137},
			{3975,16861},
			{4289,20151},
			{4848,19837},
			{5805,17316},
			{5275,17696},
			{5111,18048},
			{3853,20696},
			{3374,17541},
			{5252,16903},
			{4505,16739},
			{4102,17086},
			{5899,16861},
			{4627,20710},
			{3768,17818},
			{4754,17701},
			{4876,20100},
			{4515,20513},
			{4524,21390},
			{5303,17307},
			{3191,18147},
			{3477,17748},
			{5148,19086},
			{4158,20339},
			{4782,20616},
			{5101,16786},
			{4510,21081},
			{4562,17837},
			{5308,18842},
			{3829,18738},
			{4717,18335},
			{3637,20719},
			{4468,18391},
			{3801,18020},
			{3426,18133},
			{3951,20301},
			{3637,20372},
			{5758,18428},
			{5022,20560},
			{3585,21137},
			{3595,18344},
			{4834,19597},
			{4069,21160},
			{4069,20020},
			{3961,18560},
			{3304,17166},
			{3506,17081},
			{3374,17889},
			{4369,18006},
			{3787,17612},
			{4045,17574},
			{5735,16668},
			{4707,20372},
			{3689,18935},
			{4318,20949},
			{5782,18663},
			{3792,18297},
			{5186,20668},
			{4308,20855},
			{4073,18306},
			{4533,19095},
			{4942,21099},
			{5580,16861},
			{5529,18917},
			{3834,21287},
			{4585,18043},
			{4998,17743},
			{4655,20142},
			{4257,21409},
			{4402,18217},
			{4862,20794},
			{3581,20860},
			{3994,17931},
			{3919,18945},
			{3712,16908},
			{5097,20879},
			{5247,17912},
			{3623,18616},
			{5787,18903},
			{4313,17640},
			{4139,18719},
			{4735,20959},
			{4641,21282},
			{5120,16495},
			{3881,17405},
			{4219,17785},
			{3966,17734},
			{3844,17105},
			{4393,16959},
			{4116,18025},
			{3773,20414},
			{3398,17330},
			{4257,18917},
			{5571,17452},
			{5317,18273},
			{4632,19959},
			{4900,21301},
			{3646,17321},
			{5796,17668},
			{4843,20297},
			{5543,17781},
			{4280,19161},
			{5444,18048},
			{5261,18532},
			{4059,17311},

		};
		{
			{2078,18375},
			{2243,18345},
			{2415,18348},
			{2080,17895},
			{2294,17930},
			{2540,17957},
			
		};
		{
			{5533,18705},
			{4853,18128},
			{4632,19809},
			{4327,20372},
			{4515,20311},
			{5050,20344},
			{4247,17414},
			{5683,18194},
			{4801,16560},
			{5388,16612},
			{5045,18273},
			{4651,19330},
			{4073,20733},
			{5514,17166},
			{4364,19926},
			{5744,17062},
			{4271,20541},
			{4843,17865},
			{3562,17443},
			{4233,21142},
			{3731,20968},
			{4228,16795},
			{3585,17964},
			{4571,19527},
			{3998,20954},
			{4806,16823},
			{4275,18522},
			{3449,18795},
			{3402,18443},
			{3210,17372},
			{4078,20602},
			{6003,17184},
			{5543,18405},
			{4857,19137},
			{3975,16861},
			{4289,20151},
			{4848,19837},
			{5805,17316},
			{5275,17696},
			{5111,18048},
			{3853,20696},
			{3374,17541},
			{5252,16903},
			{4505,16739},
			{4102,17086},
			{5899,16861},
			{4627,20710},
			{3768,17818},
			{4754,17701},
			{4876,20100},
			{4515,20513},
			{4524,21390},
			{5303,17307},
			{3191,18147},
			{3477,17748},
			{5148,19086},
			{4158,20339},
			{4782,20616},
			{5101,16786},
			{4510,21081},
			{4562,17837},
			{5308,18842},
			{3829,18738},
			{4717,18335},
			{3637,20719},
			{4468,18391},
			{3801,18020},
			{3426,18133},
			{3951,20301},
			{3637,20372},
			{5758,18428},
			{5022,20560},
			{3585,21137},
			{3595,18344},
			{4834,19597},
			{4069,21160},
			{4069,20020},
			{3961,18560},
			{3304,17166},
			{3506,17081},
			{3374,17889},
			{4369,18006},
			{3787,17612},
			{4045,17574},
			{5735,16668},
			{4707,20372},
			{3689,18935},
			{4318,20949},
			{5782,18663},
			{3792,18297},
			{5186,20668},
			{4308,20855},
			{4073,18306},
			{4533,19095},
			{4942,21099},
			{5580,16861},
			{5529,18917},
			{3834,21287},
			{4585,18043},
			{4998,17743},
			{4655,20142},
			{4257,21409},
			{4402,18217},
			{4862,20794},
			{3581,20860},
			{3994,17931},
			{3919,18945},
			{3712,16908},
			{5097,20879},
			{5247,17912},
			{3623,18616},
			{5787,18903},
			{4313,17640},
			{4139,18719},
			{4735,20959},
			{4641,21282},
			{5120,16495},
			{3881,17405},
			{4219,17785},
			{3966,17734},
			{3844,17105},
			{4393,16959},
			{4116,18025},
			{3773,20414},
			{3398,17330},
			{4257,18917},
			{5571,17452},
			{5317,18273},
			{4632,19959},
			{4900,21301},
			{3646,17321},
			{5796,17668},
			{4843,20297},
			{5543,17781},
			{4280,19161},
			{5444,18048},
			{5261,18532},
			{4059,17311},
			
		};
		
	},
	[4002] = {
		{
			{5260,16479},
			{4932,20919},
			{3508,17524},
			{4451,18038},
			{4068,17162},
			{3685,18013},
			{4477,20670},
			{5210,18535},
			{5083,16623},
			{5584,16652},
			{4022,20333},
			{4047,17347},
			{5092,19087},
			{5058,17718},
			{3980,21252},
			{4140,18724},
			{4915,19478},
			{4944,20308},
			{4957,20464},
			{4645,19192},
			{4456,20047},
			{5690,17545},
			{5016,16471},
			{4055,17010},
			{5521,17836},
			{3466,18943},
			{3668,17309},
			{3693,18392},
			{3424,21033},
			{4030,20060},
			{5972,16955},
			{5365,19032},
			{4700,20898},
			{5327,18366},
			{5450,18552},
			{4776,19769},
			{5496,16467},
			{3668,20106},
			{4788,21214},
			{3933,20510},
			{5799,16909},
			{3403,17250},
			{4557,20203},
			{3752,18670},
			{4110,21407},
			{5083,20856},
			{4889,17781},
			{3752,20350},
			{3845,18168},
			{3698,21285},
			{3668,16909},
			{4081,18168},
			{4232,20468},
			{3150,17309},
			{4220,18261},
			{4856,16627},
			{5618,18939},
			{5332,18720},
			{5631,17221},
			{5500,18244},
			{3870,18926},
			{5412,17499},
			{4915,19137},
			{5281,17642},
			{5462,17292},
			{3483,18627},
			{4325,21214},
			{5327,18029},
			{4679,21348},
			{4401,19238},
			{3883,20064},
			{3453,20110},
			{3264,17423},
			{3870,21416},
			{5104,18034},
			{4173,18434},
			{3500,20868},
			{5332,17052},
			{5462,17714},
			{4687,19984},
			{4472,19074},
			{5715,18670},
			{4582,16820},
			{4203,17831},
			{4607,16597},
			{3230,17115},
			{5214,18948},
			{5555,18400},
			{4738,16450},
			{3571,18223},
			{4367,20363},
			{4283,17297},
			{4477,21121},
			{4325,20632},
			{4692,20472},
			{5483,18889},
			{4317,20969},
			{3954,17676},
			{5108,21041},
			{3466,17031},
			{3205,18181},
			{5593,18745},
			{3891,19162},
			{5386,16635},
			{4776,19331},
			{5218,17326},
			{4312,17688},
			{3634,20569},
			{3782,20729},
			{4557,18333},
			{4540,19819},
			{4590,19365},
			{3504,17789},
			{5319,16774},
			{4641,18189},
			{4611,20755},
			{4140,17617},
			{5037,21184},
			{3377,17667},
			{4553,21079},
			{3782,17107},
			{3963,20224},
			{3794,20940},
			{3984,17865},
			{4767,19575},
			{5926,16745},
			{3921,17983},
			{3992,17507},
			{3752,17785},
			{4734,17911},
			{3828,17360},
			{3938,18598},
			{4241,19087},
			{5071,20573},
			{4868,16799},
			{4607,17743},
			{4763,20788},
			{4881,18337},
			{4468,20447},
			{4258,20814},
			{5542,16896},
			{3967,18354},
			{5197,17865},
			{4999,21374},
			{4898,20632},
			{5791,16728},
			{4039,20910},
			{5079,16858},
			{4932,18013},
			{4224,20262},
			{3655,21113},
			{3436,18446},
			{5555,17073},
			{4590,19588},
			{5778,18985},
			{5075,18282},
			{3533,20637},
			{3845,21091},
			{3567,18834},
			{4932,19921},
			{3563,20346},
			{3356,17970},
			{4409,21428},
			{3870,16816},
			{4182,18042},
			{4140,20645},
			{4123,18964},
			{4274,16947},
			{4245,20026},
			{4780,20203},
			{3200,16896},
			{4190,16745},
			{3719,17532},
			{5584,18059},

			
		};
		{
			{2122,18313},
			{2303,18301},
			{2472,18285},
			{2126,17955},
			{2283,17979},
			{2448,17927},

		};
		{
			{5260,16479},
			{4932,20919},
			{3508,17524},
			{4451,18038},
			{4068,17162},
			{3685,18013},
			{4477,20670},
			{5210,18535},
			{5083,16623},
			{5584,16652},
			{4022,20333},
			{4047,17347},
			{5092,19087},
			{5058,17718},
			{3980,21252},
			{4140,18724},
			{4915,19478},
			{4944,20308},
			{4957,20464},
			{4645,19192},
			{4456,20047},
			{5690,17545},
			{5016,16471},
			{4055,17010},
			{5521,17836},
			{3466,18943},
			{3668,17309},
			{3693,18392},
			{3424,21033},
			{4030,20060},
			{5972,16955},
			{5365,19032},
			{4700,20898},
			{5327,18366},
			{5450,18552},
			{4776,19769},
			{5496,16467},
			{3668,20106},
			{4788,21214},
			{3933,20510},
			{5799,16909},
			{3403,17250},
			{4557,20203},
			{3752,18670},
			{4110,21407},
			{5083,20856},
			{4889,17781},
			{3752,20350},
			{3845,18168},
			{3698,21285},
			{3668,16909},
			{4081,18168},
			{4232,20468},
			{3150,17309},
			{4220,18261},
			{4856,16627},
			{5618,18939},
			{5332,18720},
			{5631,17221},
			{5500,18244},
			{3870,18926},
			{5412,17499},
			{4915,19137},
			{5281,17642},
			{5462,17292},
			{3483,18627},
			{4325,21214},
			{5327,18029},
			{4679,21348},
			{4401,19238},
			{3883,20064},
			{3453,20110},
			{3264,17423},
			{3870,21416},
			{5104,18034},
			{4173,18434},
			{3500,20868},
			{5332,17052},
			{5462,17714},
			{4687,19984},
			{4472,19074},
			{5715,18670},
			{4582,16820},
			{4203,17831},
			{4607,16597},
			{3230,17115},
			{5214,18948},
			{5555,18400},
			{4738,16450},
			{3571,18223},
			{4367,20363},
			{4283,17297},
			{4477,21121},
			{4325,20632},
			{4692,20472},
			{5483,18889},
			{4317,20969},
			{3954,17676},
			{5108,21041},
			{3466,17031},
			{3205,18181},
			{5593,18745},
			{3891,19162},
			{5386,16635},
			{4776,19331},
			{5218,17326},
			{4312,17688},
			{3634,20569},
			{3782,20729},
			{4557,18333},
			{4540,19819},
			{4590,19365},
			{3504,17789},
			{5319,16774},
			{4641,18189},
			{4611,20755},
			{4140,17617},
			{5037,21184},
			{3377,17667},
			{4553,21079},
			{3782,17107},
			{3963,20224},
			{3794,20940},
			{3984,17865},
			{4767,19575},
			{5926,16745},
			{3921,17983},
			{3992,17507},
			{3752,17785},
			{4734,17911},
			{3828,17360},
			{3938,18598},
			{4241,19087},
			{5071,20573},
			{4868,16799},
			{4607,17743},
			{4763,20788},
			{4881,18337},
			{4468,20447},
			{4258,20814},
			{5542,16896},
			{3967,18354},
			{5197,17865},
			{4999,21374},
			{4898,20632},
			{5791,16728},
			{4039,20910},
			{5079,16858},
			{4932,18013},
			{4224,20262},
			{3655,21113},
			{3436,18446},
			{5555,17073},
			{4590,19588},
			{5778,18985},
			{5075,18282},
			{3533,20637},
			{3845,21091},
			{3567,18834},
			{4932,19921},
			{3563,20346},
			{3356,17970},
			{4409,21428},
			{3870,16816},
			{4182,18042},
			{4140,20645},
			{4123,18964},
			{4274,16947},
			{4245,20026},
			{4780,20203},
			{3200,16896},
			{4190,16745},
			{3719,17532},
			{5584,18059},


		};
	},
	[4003] = {
		{
			{3907,20272},
			{6093,18832},
			{5068,15714},
			{5552,16775},
			{3656,20455},
			{4689,21416},
			{3634,17795},
			{5387,17607},
			{5011,16556},
			{6210,16368},
			{5405,18287},
			{3688,20308},
			{4081,21238},
			{5798,18747},
			{5964,18957},
			{5570,18354},
			{4827,14606},
			{5378,15130},
			{4765,19400},
			{4175,16950},
			{3232,18099},
			{4260,17191},
			{5525,17111},
			{5566,15277},
			{4412,20585},
			{3688,20120},
			{3719,18519},
			{4801,21112},
			{3536,20701},
			{4010,16748},
			{4528,20469},
			{5825,16565},
			{4211,16641},
			{4850,20200},
			{3831,20415},
			{3799,17889},
			{3616,17669},
			{4837,18152},
			{3907,21390},
			{3406,17321},
			{3965,17365},
			{3750,19087},
			{4716,20558},
			{5262,17334},
			{4171,17844},
			{5646,17719},
			{5320,15411},
			{5758,16932},
			{5534,17929},
			{5642,18662},
			{5092,20907},
			{4479,21260},
			{4148,17549},
			{5025,21586},
			{3844,17182},
			{4287,20929},
			{4242,18313},
			{3867,17759},
			{4130,21340},
			{6004,14647},
			{5360,16851},
			{4699,14968},
			{3442,17079},
			{5521,18126},
			{4975,20674},
			{3706,18792},
			{4510,21506},
			{6232,15559},
			{5494,18555},
			{3554,17982},
			{4278,20486},
			{4819,21296},
			{5771,17468},
			{4765,20714},
			{4604,21063},
			{3518,20048},
			{3929,20983},
			{4747,20308},
			{5838,17182},
			{3482,18859},
			{3978,18586},
			{4443,20813},
			{5409,16328},
			{3326,16918},
			{3491,20902},
			{4273,18059},
			{3348,18300},
			{4720,15423},
			{3683,16967},
			{5087,21269},
			{4908,19279},
			{4260,16771},
			{6013,15984},
			{5883,16726},
			{4019,19163},
			{5825,15049},
			{5096,15005},
			{4712,16824},
			{5995,17276},
			{6382,15856},
			{4050,20518},
			{5280,17947},
			{3947,18358},
			{5432,14468},
			{4922,20849},
			{4958,21412},
			{3688,20929},
			{3871,17562},
			{4694,16431},
			{3799,16672},
			{4891,20504},
			{5584,17361},
			{5835,14343},
			{5132,18287},
			{4850,17759},
			{4171,20710},
			{4560,19302},
			{3455,20200},
			{4609,17669},
			{4336,21264},
			{5284,16578},
			{4282,19091},
			{5297,20692},
			{6066,19150},
			{5199,16967},
			{3455,20393},
			{3799,21032},
			{3495,18287},
			{3925,18881},
			{3419,17853},
			{5002,21095},
			{3746,17365},
			{5445,18877},
			{5861,19065},
			{5047,19395},
			{5105,16337},
			{5677,18850},
			{6318,14982},
			{5695,14651},
			{5879,15335},
			{6062,16561},
			{5588,15644},
			{5002,16806},
			{4734,19610},
			{4877,15778},
			{5593,16932},
			{4139,20089},
			{5789,18559},
			{4707,20911},
			{4779,19986},
			{4555,19507},
			{6354,15380},
			{5619,16341},
			{5619,19069},
			{3518,17477},
			{3129,16793},
			{4229,17388},
			{4135,18219},
			{5034,14750},
			{4036,17191},
			{4528,19878},
			{6044,16959},
			{3424,18640},
			{3934,20080},
			{4488,16690},
			{5280,18684},
			{3397,17678},
			{3607,21121},
			{5177,15984},
			{5159,17638},
			{3907,16950},
			{4247,18555},
			{4095,21063},
			{3934,18023},
			{4546,18295},
			{4385,20097},
			{4604,21233},
			{5360,14861},
			{6116,15201},
			{4662,16605},
			{3911,20804},
			{4171,20285},
			{4461,16891},
			{3442,18103},
			{3250,17446},
			{5897,16373},
			{4640,20719},
			{4354,21086},
			{4806,15188},
			{3191,17066},
			{6071,16793},
			{5038,20491},
			{5932,15791},
			{5843,15555},
			{4148,18787},
			{5628,14951},
			{4877,18322},
			{5154,14329},
			{4372,17656},
			{5503,15800},
			{5105,19141},
			{5660,16024},
			{5561,16565},
			{5226,18121},
			{4555,18041},
			{5007,17991},
			{4698,19109},
			{3813,20630},
			{3732,18179},
			{4417,19284},
			{4452,20325},
			{5271,20482},
			{3187,17280},
			{4662,17915},
			{4967,15514},
			{4582,20102},
			{3594,17240},
			{5347,19150},


		};
		{
			{2078,18309},
			{2248,18318},
			{2458,18309},
			{2069,17933},
			{2239,17924},
			{2449,17942},

		};
		{
			{3907,20272},
			{6093,18832},
			{5068,15714},
			{5552,16775},
			{3656,20455},
			{4689,21416},
			{3634,17795},
			{5387,17607},
			{5011,16556},
			{6210,16368},
			{5405,18287},
			{3688,20308},
			{4081,21238},
			{5798,18747},
			{5964,18957},
			{5570,18354},
			{4827,14606},
			{5378,15130},
			{4765,19400},
			{4175,16950},
			{3232,18099},
			{4260,17191},
			{5525,17111},
			{5566,15277},
			{4412,20585},
			{3688,20120},
			{3719,18519},
			{4801,21112},
			{3536,20701},
			{4010,16748},
			{4528,20469},
			{5825,16565},
			{4211,16641},
			{4850,20200},
			{3831,20415},
			{3799,17889},
			{3616,17669},
			{4837,18152},
			{3907,21390},
			{3406,17321},
			{3965,17365},
			{3750,19087},
			{4716,20558},
			{5262,17334},
			{4171,17844},
			{5646,17719},
			{5320,15411},
			{5758,16932},
			{5534,17929},
			{5642,18662},
			{5092,20907},
			{4479,21260},
			{4148,17549},
			{5025,21586},
			{3844,17182},
			{4287,20929},
			{4242,18313},
			{3867,17759},
			{4130,21340},
			{6004,14647},
			{5360,16851},
			{4699,14968},
			{3442,17079},
			{5521,18126},
			{4975,20674},
			{3706,18792},
			{4510,21506},
			{6232,15559},
			{5494,18555},
			{3554,17982},
			{4278,20486},
			{4819,21296},
			{5771,17468},
			{4765,20714},
			{4604,21063},
			{3518,20048},
			{3929,20983},
			{4747,20308},
			{5838,17182},
			{3482,18859},
			{3978,18586},
			{4443,20813},
			{5409,16328},
			{3326,16918},
			{3491,20902},
			{4273,18059},
			{3348,18300},
			{4720,15423},
			{3683,16967},
			{5087,21269},
			{4908,19279},
			{4260,16771},
			{6013,15984},
			{5883,16726},
			{4019,19163},
			{5825,15049},
			{5096,15005},
			{4712,16824},
			{5995,17276},
			{6382,15856},
			{4050,20518},
			{5280,17947},
			{3947,18358},
			{5432,14468},
			{4922,20849},
			{4958,21412},
			{3688,20929},
			{3871,17562},
			{4694,16431},
			{3799,16672},
			{4891,20504},
			{5584,17361},
			{5835,14343},
			{5132,18287},
			{4850,17759},
			{4171,20710},
			{4560,19302},
			{3455,20200},
			{4609,17669},
			{4336,21264},
			{5284,16578},
			{4282,19091},
			{5297,20692},
			{6066,19150},
			{5199,16967},
			{3455,20393},
			{3799,21032},
			{3495,18287},
			{3925,18881},
			{3419,17853},
			{5002,21095},
			{3746,17365},
			{5445,18877},
			{5861,19065},
			{5047,19395},
			{5105,16337},
			{5677,18850},
			{6318,14982},
			{5695,14651},
			{5879,15335},
			{6062,16561},
			{5588,15644},
			{5002,16806},
			{4734,19610},
			{4877,15778},
			{5593,16932},
			{4139,20089},
			{5789,18559},
			{4707,20911},
			{4779,19986},
			{4555,19507},
			{6354,15380},
			{5619,16341},
			{5619,19069},
			{3518,17477},
			{3129,16793},
			{4229,17388},
			{4135,18219},
			{5034,14750},
			{4036,17191},
			{4528,19878},
			{6044,16959},
			{3424,18640},
			{3934,20080},
			{4488,16690},
			{5280,18684},
			{3397,17678},
			{3607,21121},
			{5177,15984},
			{5159,17638},
			{3907,16950},
			{4247,18555},
			{4095,21063},
			{3934,18023},
			{4546,18295},
			{4385,20097},
			{4604,21233},
			{5360,14861},
			{6116,15201},
			{4662,16605},
			{3911,20804},
			{4171,20285},
			{4461,16891},
			{3442,18103},
			{3250,17446},
			{5897,16373},
			{4640,20719},
			{4354,21086},
			{4806,15188},
			{3191,17066},
			{6071,16793},
			{5038,20491},
			{5932,15791},
			{5843,15555},
			{4148,18787},
			{5628,14951},
			{4877,18322},
			{5154,14329},
			{4372,17656},
			{5503,15800},
			{5105,19141},
			{5660,16024},
			{5561,16565},
			{5226,18121},
			{4555,18041},
			{5007,17991},
			{4698,19109},
			{3813,20630},
			{3732,18179},
			{4417,19284},
			{4452,20325},
			{5271,20482},
			{3187,17280},
			{4662,17915},
			{4967,15514},
			{4582,20102},
			{3594,17240},
			{5347,19150},

		};
	},
	[4004] = {
		{
			{4505,18093},
			{5066,15183},
			{6158,16249},
			{4158,18474},
			{3967,18549},
			{3885,17102},
			{4057,17373},
			{4648,15396},
			{5944,17209},
			{3776,18331},
			{4525,16690},
			{4442,20451},
			{5022,17800},
			{5024,21330},
			{5444,16815},
			{4219,18038},
			{4883,20165},
			{4919,15749},
			{5715,15019},
			{4905,19945},
			{3987,19005},
			{6338,15158},
			{3722,18603},
			{4826,19207},
			{5264,16674},
			{5739,15782},
			{3521,17518},
			{3634,20360},
			{5690,18310},
			{4037,18039},
			{4714,14625},
			{5224,17007},
			{3980,20176},
			{3510,21185},
			{3906,20822},
			{4294,18283},
			{4212,18828},
			{3940,17793},
			{3803,17496},
			{5472,18379},
			{6078,19155},
			{4156,21122},
			{5025,14354},
			{5175,21034},
			{4542,20880},
			{3884,20363},
			{5969,15913},
			{5313,15388},
			{5821,16134},
			{5207,15886},
			{3655,21062},
			{3863,21094},
			{5213,18474},
			{3613,18801},
			{4634,19427},
			{4230,21263},
			{3484,18310},
			{5102,19150},
			{3838,18099},
			{4136,20677},
			{4675,17888},
			{4964,21465},
			{4436,19971},
			{4648,14994},
			{4702,17711},
			{4209,20417},
			{3712,21217},
			{4081,16954},
			{3763,19121},
			{3436,18562},
			{5159,20490},
			{5302,18705},
			{3704,21372},
			{4793,19743},
			{3524,20536},
			{5575,14329},
			{4810,20442},
			{4412,21634},
			{3770,16952},
			{4249,20977},
			{5926,15609},
			{4755,19371},
			{5383,17480},
			{6146,18882},
			{5547,17984},
			{5842,16587},
			{5411,19128},
			{6412,15855},
			{4049,18276},
			{4287,20829},
			{5329,17813},
			{5709,17368},
			{5601,19073},
			{4460,21148},
			{4712,20036},
			{3450,20158},
			{4156,21447},
			{5023,16834},
			{5606,17045},
			{6018,17004},
			{5624,15519},
			{3930,19996},
			{5230,15593},
			{4553,19196},
			{3644,20112},
			{5017,16635},
			{5656,18821},
			{3926,18828},
			{4498,18351},
			{6412,15494},
			{3347,17738},
			{4012,20518},
			{5275,20762},
			{6197,15896},
			{5724,18549},
			{3918,16741},
			{5329,18188},
			{3764,20892},
			{4964,15464},
			{6149,15585},
			{3155,16938},
			{3468,20790},
			{6182,14863},
			{5633,16463},
			{4730,18167},
			{4745,20823},
			{4170,20003},
			{4738,16528},
			{5874,18978},
			{4233,17759},
			{4968,18147},
			{4655,21156},
			{3426,19993},
			{4001,20963},
			{3162,17209},
			{4436,20636},
			{5148,14863},
			{5601,18665},
			{3647,17704},
			{4212,19128},
			{3743,20462},
			{5501,17234},
			{4021,18630},
			{4887,20674},
			{4851,20960},
			{4336,16807},
			{5788,16840},
			{3673,20734},
			{4668,21005},
			{5132,16422},
			{4907,21180},
			{6092,16536},
			{3835,20624},
			{4866,19492},
			{3482,20998},
			{4509,21432},
			{4682,20603},
			{5526,17623},
			{4736,18413},
			{3955,21471},
			{5091,16102},
			{4749,21394},
			{5992,16761},
			{5710,17684},
			{5435,16284},
			{5427,14699},
			{4968,18447},
			{3270,17414},
			{3571,17025},
			{5509,15954},
			{4960,17004},
			{3966,21210},
			{5138,18024},
			{5985,14502},
			{5985,15191},
			{3531,18059},
			{5554,16646},
			{4156,17127},
			{4655,19843},
			{5395,15027},
			{4267,17493},
			{3508,17267},
			{5411,18930},
			{3313,17936},
			{4681,16832},
			{5589,15285},
			{5887,18685},
			{4363,20206},
			{3266,18174},
			{5500,15740},
			{5029,20839},
			{4607,20295},
			{3793,20134},

		};
		{
			{2077,18323},
			{2266,18330},
			{2480,18311},
			{2103,17975},
			{2288,17975},
			{2514,18012},
		};
		{
			{4505,18093},
			{5066,15183},
			{6158,16249},
			{4158,18474},
			{3967,18549},
			{3885,17102},
			{4057,17373},
			{4648,15396},
			{5944,17209},
			{3776,18331},
			{4525,16690},
			{4442,20451},
			{5022,17800},
			{5024,21330},
			{5444,16815},
			{4219,18038},
			{4883,20165},
			{4919,15749},
			{5715,15019},
			{4905,19945},
			{3987,19005},
			{6338,15158},
			{3722,18603},
			{4826,19207},
			{5264,16674},
			{5739,15782},
			{3521,17518},
			{3634,20360},
			{5690,18310},
			{4037,18039},
			{4714,14625},
			{5224,17007},
			{3980,20176},
			{3510,21185},
			{3906,20822},
			{4294,18283},
			{4212,18828},
			{3940,17793},
			{3803,17496},
			{5472,18379},
			{6078,19155},
			{4156,21122},
			{5025,14354},
			{5175,21034},
			{4542,20880},
			{3884,20363},
			{5969,15913},
			{5313,15388},
			{5821,16134},
			{5207,15886},
			{3655,21062},
			{3863,21094},
			{5213,18474},
			{3613,18801},
			{4634,19427},
			{4230,21263},
			{3484,18310},
			{5102,19150},
			{3838,18099},
			{4136,20677},
			{4675,17888},
			{4964,21465},
			{4436,19971},
			{4648,14994},
			{4702,17711},
			{4209,20417},
			{3712,21217},
			{4081,16954},
			{3763,19121},
			{3436,18562},
			{5159,20490},
			{5302,18705},
			{3704,21372},
			{4793,19743},
			{3524,20536},
			{5575,14329},
			{4810,20442},
			{4412,21634},
			{3770,16952},
			{4249,20977},
			{5926,15609},
			{4755,19371},
			{5383,17480},
			{6146,18882},
			{5547,17984},
			{5842,16587},
			{5411,19128},
			{6412,15855},
			{4049,18276},
			{4287,20829},
			{5329,17813},
			{5709,17368},
			{5601,19073},
			{4460,21148},
			{4712,20036},
			{3450,20158},
			{4156,21447},
			{5023,16834},
			{5606,17045},
			{6018,17004},
			{5624,15519},
			{3930,19996},
			{5230,15593},
			{4553,19196},
			{3644,20112},
			{5017,16635},
			{5656,18821},
			{3926,18828},
			{4498,18351},
			{6412,15494},
			{3347,17738},
			{4012,20518},
			{5275,20762},
			{6197,15896},
			{5724,18549},
			{3918,16741},
			{5329,18188},
			{3764,20892},
			{4964,15464},
			{6149,15585},
			{3155,16938},
			{3468,20790},
			{6182,14863},
			{5633,16463},
			{4730,18167},
			{4745,20823},
			{4170,20003},
			{4738,16528},
			{5874,18978},
			{4233,17759},
			{4968,18147},
			{4655,21156},
			{3426,19993},
			{4001,20963},
			{3162,17209},
			{4436,20636},
			{5148,14863},
			{5601,18665},
			{3647,17704},
			{4212,19128},
			{3743,20462},
			{5501,17234},
			{4021,18630},
			{4887,20674},
			{4851,20960},
			{4336,16807},
			{5788,16840},
			{3673,20734},
			{4668,21005},
			{5132,16422},
			{4907,21180},
			{6092,16536},
			{3835,20624},
			{4866,19492},
			{3482,20998},
			{4509,21432},
			{4682,20603},
			{5526,17623},
			{4736,18413},
			{3955,21471},
			{5091,16102},
			{4749,21394},
			{5992,16761},
			{5710,17684},
			{5435,16284},
			{5427,14699},
			{4968,18447},
			{3270,17414},
			{3571,17025},
			{5509,15954},
			{4960,17004},
			{3966,21210},
			{5138,18024},
			{5985,14502},
			{5985,15191},
			{3531,18059},
			{5554,16646},
			{4156,17127},
			{4655,19843},
			{5395,15027},
			{4267,17493},
			{3508,17267},
			{5411,18930},
			{3313,17936},
			{4681,16832},
			{5589,15285},
			{5887,18685},
			{4363,20206},
			{3266,18174},
			{5500,15740},
			{5029,20839},
			{4607,20295},
			{3793,20134},
		};
	},
	[4005] = {
		{
			{5459,17181},
			{4120,18822},
			{8292,15914},
			{5675,14261},
			{5046,19369},
			{5232,16917},
			{5589,15109},
			{3361,17810},
			{4774,19250},
			{3759,18945},
			{4715,20857},
			{4231,21289},
			{5470,15943},
			{4901,16448},
			{5790,15396},
			{4596,17873},
			{8890,15317},
			{4715,19793},
			{5072,20675},
			{4797,15660},
			{6378,15972},
			{3993,17200},
			{4160,19004},
			{5221,18286},
			{4410,17699},
			{4425,18379},
			{5243,14361},
			{3491,17007},
			{4060,20202},
			{4722,15065},
			{3439,21099},
			{4581,20500},
			{3800,17665},
			{4120,18089},
			{4949,18249},
			{5518,18614},
			{4559,19514},
			{4823,17691},
			{6009,18982},
			{5418,15321},
			{3253,17155},
			{3305,18041},
			{6129,16374},
			{4942,21196},
			{5623,17658},
			{5128,20853},
			{3833,18257},
			{9144,15556},
			{8621,16856},
			{8090,15675},
			{5727,18885},
			{4566,19116},
			{5645,17085},
			{3848,17966},
			{4789,20496},
			{3852,17438},
			{9054,15878},
			{6039,15117},
			{5667,17397},
			{4499,16705},
			{4678,20195},
			{5277,17684},
			{5864,17230},
			{3777,20891},
			{4544,20697},
			{3688,17174},
			{5504,18167},
			{3569,20373},
			{4841,20972},
			{3904,21359},
			{4934,16672},
			{4142,21452},
			{3997,19123},
			{3785,21136},
			{8434,15361},
			{4986,19083},
			{4607,21393},
			{4886,21486},
			{6054,17077},
			{4320,19190},
			{5522,18870},
			{4934,14845},
			{6285,15001},
			{8770,15713},
			{5786,14826},
			{4309,20950},
			{4090,20035},
			{9300,15825},
			{3900,16887},
			{5202,18071},
			{4179,17353},
			{3156,17989},
			{5009,20310},
			{8972,16183},
			{3498,18774},
			{5128,21069},
			{5928,16024},
			{4782,20050},
			{5161,15727},
			{9002,16617},
			{3394,17513},
			{3837,20459},
			{4886,14413},
			{3599,17792},
			{3431,17323},
			{4529,18216},
			{3751,20061},
			{5016,15388},
			{5280,18763},
			{4722,18346},
			{4257,18204},
			{3733,20240},
			{4704,15355},
			{5042,20440},
			{4127,16940},
			{3822,20630},
			{4778,14603},
			{6103,16701},
			{3703,18364},
			{8703,15997},
			{9547,15877},
			{5597,16802},
			{5786,19164},
			{4730,18085},
			{5511,18338},
			{9330,16512},
			{3926,20258},
			{4097,20638},
			{4127,18461},
			{5924,15563},
			{5667,14588},
			{5288,14964},
			{3349,18264},
			{4120,17832},
			{3483,18487},
			{6017,14555},
			{6039,15734},
			{5757,18376},
			{5697,18640},
			{8202,16385},
			{5928,14897},
			{5403,18956},
			{4149,20455},
			{5299,16527},
			{4451,20414},
			{5265,18554},
			{8725,16340},
			{3554,18093},
			{8396,16198},
			{5329,17397},
			{4402,20727},
			{4700,14826},
			{4864,16910},
			{8591,15055},
			{5556,14826},
			{5567,16285},
			{4867,19533},
			{5522,15671},
			{4000,20839},
			{4477,21214},
			{8426,16564},
			{5864,16285},
			{5712,15838},
			{4957,19998},
			{5031,15980},
			{3543,20132},
			{3491,20902},
			{5749,15109},
			{4510,19961},
			{4023,21021},
			{5206,16341},
			{4399,20191},
			{9315,16176},
			{4700,16452},
			{6333,15340},
			{3547,20545},
			{5120,15001},
			{6088,15347},
			{8456,15698},
			{3736,18610},
			{3141,16854},
			{4127,16698},
			{5280,19123},
			{3900,18681},
			{5719,16545},
			{5474,17989},
			{3625,19153},
			{5109,14674},
			{5760,16940},
			{5556,19090},
			{4622,19354},
			{4878,20623},
			{4938,15637},
			{4878,17914},
			{6348,15623},
			{4391,18059},
			{5727,18033},
			{4131,17591},
			{4332,16895},
			{4689,21065},
			{5303,16735},
			{3576,20742},


		};
		{
			{2034,18322},
			{2199,18314},
			{2430,18326},
			{2044,17934},
			{2259,17954},
			{2462,17980},

		};
		{
			{5459,17181},
			{4120,18822},
			{8292,15914},
			{5675,14261},
			{5046,19369},
			{5232,16917},
			{5589,15109},
			{3361,17810},
			{4774,19250},
			{3759,18945},
			{4715,20857},
			{4231,21289},
			{5470,15943},
			{4901,16448},
			{5790,15396},
			{4596,17873},
			{8890,15317},
			{4715,19793},
			{5072,20675},
			{4797,15660},
			{6378,15972},
			{3993,17200},
			{4160,19004},
			{5221,18286},
			{4410,17699},
			{4425,18379},
			{5243,14361},
			{3491,17007},
			{4060,20202},
			{4722,15065},
			{3439,21099},
			{4581,20500},
			{3800,17665},
			{4120,18089},
			{4949,18249},
			{5518,18614},
			{4559,19514},
			{4823,17691},
			{6009,18982},
			{5418,15321},
			{3253,17155},
			{3305,18041},
			{6129,16374},
			{4942,21196},
			{5623,17658},
			{5128,20853},
			{3833,18257},
			{9144,15556},
			{8621,16856},
			{8090,15675},
			{5727,18885},
			{4566,19116},
			{5645,17085},
			{3848,17966},
			{4789,20496},
			{3852,17438},
			{9054,15878},
			{6039,15117},
			{5667,17397},
			{4499,16705},
			{4678,20195},
			{5277,17684},
			{5864,17230},
			{3777,20891},
			{4544,20697},
			{3688,17174},
			{5504,18167},
			{3569,20373},
			{4841,20972},
			{3904,21359},
			{4934,16672},
			{4142,21452},
			{3997,19123},
			{3785,21136},
			{8434,15361},
			{4986,19083},
			{4607,21393},
			{4886,21486},
			{6054,17077},
			{4320,19190},
			{5522,18870},
			{4934,14845},
			{6285,15001},
			{8770,15713},
			{5786,14826},
			{4309,20950},
			{4090,20035},
			{9300,15825},
			{3900,16887},
			{5202,18071},
			{4179,17353},
			{3156,17989},
			{5009,20310},
			{8972,16183},
			{3498,18774},
			{5128,21069},
			{5928,16024},
			{4782,20050},
			{5161,15727},
			{9002,16617},
			{3394,17513},
			{3837,20459},
			{4886,14413},
			{3599,17792},
			{3431,17323},
			{4529,18216},
			{3751,20061},
			{5016,15388},
			{5280,18763},
			{4722,18346},
			{4257,18204},
			{3733,20240},
			{4704,15355},
			{5042,20440},
			{4127,16940},
			{3822,20630},
			{4778,14603},
			{6103,16701},
			{3703,18364},
			{8703,15997},
			{9547,15877},
			{5597,16802},
			{5786,19164},
			{4730,18085},
			{5511,18338},
			{9330,16512},
			{3926,20258},
			{4097,20638},
			{4127,18461},
			{5924,15563},
			{5667,14588},
			{5288,14964},
			{3349,18264},
			{4120,17832},
			{3483,18487},
			{6017,14555},
			{6039,15734},
			{5757,18376},
			{5697,18640},
			{8202,16385},
			{5928,14897},
			{5403,18956},
			{4149,20455},
			{5299,16527},
			{4451,20414},
			{5265,18554},
			{8725,16340},
			{3554,18093},
			{8396,16198},
			{5329,17397},
			{4402,20727},
			{4700,14826},
			{4864,16910},
			{8591,15055},
			{5556,14826},
			{5567,16285},
			{4867,19533},
			{5522,15671},
			{4000,20839},
			{4477,21214},
			{8426,16564},
			{5864,16285},
			{5712,15838},
			{4957,19998},
			{5031,15980},
			{3543,20132},
			{3491,20902},
			{5749,15109},
			{4510,19961},
			{4023,21021},
			{5206,16341},
			{4399,20191},
			{9315,16176},
			{4700,16452},
			{6333,15340},
			{3547,20545},
			{5120,15001},
			{6088,15347},
			{8456,15698},
			{3736,18610},
			{3141,16854},
			{4127,16698},
			{5280,19123},
			{3900,18681},
			{5719,16545},
			{5474,17989},
			{3625,19153},
			{5109,14674},
			{5760,16940},
			{5556,19090},
			{4622,19354},
			{4878,20623},
			{4938,15637},
			{4878,17914},
			{6348,15623},
			{4391,18059},
			{5727,18033},
			{4131,17591},
			{4332,16895},
			{4689,21065},
			{5303,16735},
			{3576,20742},
		};
	},
	[4008] = {
		{
			{5116,15809},
			{5641,19014},
			{4648,15318},
			{4949,16580},
			{4479,18433},
			{5259,15483},
			{3143,16731},
			{3955,19077},
			{9456,15810},
			{4877,15451},
			{3191,17002},
			{3907,16739},
			{4153,17073},
			{5259,17503},
			{4718,19109},
			{5020,14560},
			{3541,18417},
			{5577,14846},
			{5847,14560},
			{3748,18171},
			{4654,18807},
			{4766,19594},
			{6003,15484},
			{4599,17757},
			{3915,20517},
			{5521,16087},
			{5141,15989},
			{8814,14966},
			{8217,15284},
			{5036,19117},
			{3843,21344},
			{4384,17343},
			{5012,20389},
			{4233,18465},
			{5140,21049},
			{5656,14584},
			{3303,18067},
			{4612,17541},
			{4927,15770},
			{4694,20992},
			{6356,15013},
			{4710,18576},
			{5414,15774},
			{5474,16394},
			{4543,19212},
			{4074,20294},
			{5259,16485},
			{8973,15316},
			{4941,17280},
			{5140,17924},
			{5887,15276},
			{3692,18847},
			{4201,20882},
			{5092,15117},
			{4813,21550},
			{4571,16994},
			{8479,16673},
			{4646,17240},
			{3470,17240},
			{5664,15722},
			{4861,18449},
			{4493,18022},
			{4209,17511},
			{3978,18004},
			{4281,20509},
			{5521,17598},
			{3700,21049},
			{3739,17945},
			{5649,15506},
			{8305,15673},
			{4933,17574},
			{5219,20827},
			{6165,15276},
			{5219,18417},
			{3533,17463},
			{5410,18711},
			{4980,21328},
			{3525,18147},
			{3740,17511},
			{8122,16174},
			{8806,16699},
			{4416,18966},
			{9259,16429},
			{3780,17129},
			{4385,21290},
			{8289,16381},
			{5283,14536},
			{4631,18210},
			{3963,18306},
			{4583,21232},
			{3454,17049},
			{5744,15912},
			{5076,18656},
			{3080,18171},
			{3843,20851},
			{4503,20485},
			{9108,15999},
			{5132,16882},
			{4320,19586},
			{4010,20978},
			{5100,17154},
			{4939,14920},
			{5434,19085},
			{4106,21431},
			{4845,21002},
			{5712,18672},
			{4654,16707},
			{5418,18012},
			{4098,17685},
			{3637,20731},
			{5409,15056},
			{5391,16881},
			{9140,15673},
			{5871,15610},
			{5148,16230},
			{4265,19165},
			{3963,17383},
			{4297,18163},
			{4082,20612},
			{3971,18680},
			{3780,16882},
			{4648,15591},
			{9402,16103},
			{5497,18346},
			{6070,16055},
			{5784,16302},
			{5299,20517},
			{8448,15832},
			{4885,18862},
			{5068,18194},
			{8519,15331},
			{8635,15110},
			{4424,21407},
			{8583,16437},
			{8901,16326},
			{4607,19467},
			{3541,17813},
			{6022,14703},
			{4561,19666},
			{4138,16779},
			{3780,18640},
			{5179,18910},
			{4177,18998},
			{8830,16063},
			{8694,15562},
			{9263,15375},
			{4297,18727},
			{8101,15811},
			{8313,16055},
			{4710,14608},
			{4646,19952},
			{4774,17948},
			{5362,17169},
			{4305,20008},
			{8758,15777},
			{4384,19387},
			{5553,15284},
			{4440,20230},
			{5801,16162},
			{9070,16606},
			{4853,20644},
			{6157,15769},
			{4845,16954},
			{5871,15005},
			{4758,14997},
			{4821,19348},
			{3183,17232},
			{3804,17654},
			{8527,16119},
			{4328,21081},
			{4472,20771},
			{4257,17860},
			{4670,20262},
			{5227,14767},
			{4352,16946},
			{3851,21105},


		};
		{
			{2069,18269},
			{2228,18265},
			{2420,18224},
			{2095,17951},
			{2255,17953},
			{2413,17983},
		};
		{
			{5116,15809},
			{5641,19014},
			{4648,15318},
			{4949,16580},
			{4479,18433},
			{5259,15483},
			{3143,16731},
			{3955,19077},
			{9456,15810},
			{4877,15451},
			{3191,17002},
			{3907,16739},
			{4153,17073},
			{5259,17503},
			{4718,19109},
			{5020,14560},
			{3541,18417},
			{5577,14846},
			{5847,14560},
			{3748,18171},
			{4654,18807},
			{4766,19594},
			{6003,15484},
			{4599,17757},
			{3915,20517},
			{5521,16087},
			{5141,15989},
			{8814,14966},
			{8217,15284},
			{5036,19117},
			{3843,21344},
			{4384,17343},
			{5012,20389},
			{4233,18465},
			{5140,21049},
			{5656,14584},
			{3303,18067},
			{4612,17541},
			{4927,15770},
			{4694,20992},
			{6356,15013},
			{4710,18576},
			{5414,15774},
			{5474,16394},
			{4543,19212},
			{4074,20294},
			{5259,16485},
			{8973,15316},
			{4941,17280},
			{5140,17924},
			{5887,15276},
			{3692,18847},
			{4201,20882},
			{5092,15117},
			{4813,21550},
			{4571,16994},
			{8479,16673},
			{4646,17240},
			{3470,17240},
			{5664,15722},
			{4861,18449},
			{4493,18022},
			{4209,17511},
			{3978,18004},
			{4281,20509},
			{5521,17598},
			{3700,21049},
			{3739,17945},
			{5649,15506},
			{8305,15673},
			{4933,17574},
			{5219,20827},
			{6165,15276},
			{5219,18417},
			{3533,17463},
			{5410,18711},
			{4980,21328},
			{3525,18147},
			{3740,17511},
			{8122,16174},
			{8806,16699},
			{4416,18966},
			{9259,16429},
			{3780,17129},
			{4385,21290},
			{8289,16381},
			{5283,14536},
			{4631,18210},
			{3963,18306},
			{4583,21232},
			{3454,17049},
			{5744,15912},
			{5076,18656},
			{3080,18171},
			{3843,20851},
			{4503,20485},
			{9108,15999},
			{5132,16882},
			{4320,19586},
			{4010,20978},
			{5100,17154},
			{4939,14920},
			{5434,19085},
			{4106,21431},
			{4845,21002},
			{5712,18672},
			{4654,16707},
			{5418,18012},
			{4098,17685},
			{3637,20731},
			{5409,15056},
			{5391,16881},
			{9140,15673},
			{5871,15610},
			{5148,16230},
			{4265,19165},
			{3963,17383},
			{4297,18163},
			{4082,20612},
			{3971,18680},
			{3780,16882},
			{4648,15591},
			{9402,16103},
			{5497,18346},
			{6070,16055},
			{5784,16302},
			{5299,20517},
			{8448,15832},
			{4885,18862},
			{5068,18194},
			{8519,15331},
			{8635,15110},
			{4424,21407},
			{8583,16437},
			{8901,16326},
			{4607,19467},
			{3541,17813},
			{6022,14703},
			{4561,19666},
			{4138,16779},
			{3780,18640},
			{5179,18910},
			{4177,18998},
			{8830,16063},
			{8694,15562},
			{9263,15375},
			{4297,18727},
			{8101,15811},
			{8313,16055},
			{4710,14608},
			{4646,19952},
			{4774,17948},
			{5362,17169},
			{4305,20008},
			{8758,15777},
			{4384,19387},
			{5553,15284},
			{4440,20230},
			{5801,16162},
			{9070,16606},
			{4853,20644},
			{6157,15769},
			{4845,16954},
			{5871,15005},
			{4758,14997},
			{4821,19348},
			{3183,17232},
			{3804,17654},
			{8527,16119},
			{4328,21081},
			{4472,20771},
			{4257,17860},
			{4670,20262},
			{5227,14767},
			{4352,16946},
			{3851,21105},
		};
	},
}

PartnerCard.tbAllowClientCallFunc = 
{
	["SendGift"] = true;
	["AddCard"] = true;
	["SynCardGiftData"] = true;
	["CardUpGrade"] = true;
	["UnlockCardPos"] = true;
	["UpPos"] = true;
	["DownPos"] = true;
	["LiveHouse"] = true;
	["LeaveHouse"] = true;
	["SynCardHouseData"] = true;
	["UpdateHouseCardShow"] = true;
	["AddCardVisitState"] = true;
	["AnswerVisitQuestion"] = true;
	["AddCardMuseState"] = true;
	["SynDevilCardInfo"] = true;
	["CureDevil"] = true;
	["InvitePlayer2TripFuben"] = true;
	["InviteApply2TripFuben"] = true;
	["RandomInvite2TripFuben"] = true;
	["StartTripFuben"] = true;
	["AddCardTripState"] = true;
	["GetTripMapAward"] = true;
	["GetActAward"] = true;
	["GoLiveNpc"] = true;
	["SynActData"] = true;
	["DismissCard"] = true;
	["GoPlayerHouseCardPos"] = true;
	["DismissCardBatch"] = true;
	["ActivityTask"] = true;
}

-- 玩家门客入魔数据
PartnerCard.tbDevilInfo = PartnerCard.tbDevilInfo or {}
-- 家园创建的门客npc信息
PartnerCard.tbPartnerCardNpc = PartnerCard.tbPartnerCardNpc or {}
-- 游历副本创建的npc信息
PartnerCard.tbTripMapNpc = PartnerCard.tbTripMapNpc or {}
-- 家园地图已使用的门客坐标
PartnerCard.tbUsePosInfo = PartnerCard.tbUsePosInfo or {}

-- 活动半径
PartnerCard.nActiveR = 300
-- 到达之后等待几秒继续走
PartnerCard.nWalkWaitTime = 5

-- 返回随机活动坐标点
function PartnerCard:GetActivePos(nMapId, nX, nY)
	local nPosX, nPosY
	local nMinX = math.max(nX - PartnerCard.nActiveR, 0)
	local nMaxX = math.max(nX + PartnerCard.nActiveR, 0)
	local nMinY = math.max(nY - PartnerCard.nActiveR, 0)
	local nMaxY = math.max(nY + PartnerCard.nActiveR, 0)
	-- 最多寻1000次，寻不到无障碍点就放弃
	for i=1,1000 do
		local nRandomPosX = MathRandom(nMinX, nMaxX)
		local nRandomPosY = MathRandom(nMinY, nMaxY)
		local bCanUse = CheckBarrier(nMapId, nRandomPosX, nRandomPosY);
		local bCanPut = Decoration:CheckCanUseDecoration(nMapId, nRandomPosX, nRandomPosY, nil, PartnerCard.nNpcFurnitureId)
		if bCanUse and bCanPut then
			nPosX, nPosY = nRandomPosX, nRandomPosY
			break
		end
	end
	return nPosX, nPosY
end

function PartnerCard:DoNpcWalk(dwID, nCardId)
	local tbCardData = self:GetHouseCardData(dwID)
	if not tbCardData then
		return 
	end
	if not tbCardData[nCardId] then
		return
	end
	local nBornX = tbCardData[nCardId].nPosX
	local nBornY = tbCardData[nCardId].nPosY
	if not nBornX or not nBornY then
		return
	end
	if PartnerCard:IsActing(dwID, nCardId, PartnerCard.CARD_ACT_STATE_MUSE) then
		return
	end
	local tbLive = PartnerCard:GetHouseLiveNpcInfo(dwID)
	local nNpcId = tbLive[nCardId] and tbLive[nCardId].nNpcId
	if not nNpcId then
		return
	end
	local pNpc = KNpc.GetById(nNpcId)
	if not pNpc then
		return 
	end
	if pNpc.bSleep then
		return
	end
	local nWalkCount = pNpc.nWalkCount or 1
	local nWalkX, nWalkY = nBornX, nBornY
	local nMapId = pNpc.nMapId
	if nWalkCount % 2 ~= 0 then
	 	nWalkX, nWalkY = PartnerCard:GetActivePos(nMapId, nBornX, nBornY)
	 	if not nWalkX or not nWalkY then
	 		pNpc.bSleep = true
	 		Log("PartnerCard fnDoNpcWalk No Find Pos", dwID, nCardId)
	 		return 
	 	end
	end
	local bCanUse = CheckBarrier(nMapId, nWalkX, nWalkY);
	local bCanPut = Decoration:CheckCanUseDecoration(nMapId, nWalkX, nWalkY, nil, PartnerCard.nNpcFurnitureId)
	if not bCanUse or not bCanPut then
		-- 目标点有障碍暂时睡眠
		pNpc.bSleep = true
		Log("PartnerCard fnDoNpcWalk Barrier Pos", dwID, nCardId, nWalkX, nWalkY)
		return
	end
	pNpc.nWalkCount = (pNpc.nWalkCount or 0) + 1
	pNpc.SetAiActive(1);
	pNpc.AI_ClearMovePathPoint();
	pNpc.AI_AddMovePos(nWalkX, nWalkY);
	pNpc.SetActiveForever(1)
	pNpc.AI_StartPath();
	pNpc.tbOnArrive = {self.OnArrivePath, self, dwID, nCardId, pNpc.nId};
end

function PartnerCard:OnArrivePath(dwID, nCardId, nNpcID)
	local pNpc = KNpc.GetById(nNpcID);
	if pNpc then
		pNpc.SetAiActive(0);
	end
	if PartnerCard.nWalkWaitTime and PartnerCard.nWalkWaitTime > 0 then
		 Timer:Register(Env.GAME_FPS * PartnerCard.nWalkWaitTime, self.DoNpcWalk, self, dwID, nCardId);
	else
		self:DoNpcWalk(dwID, nCardId)
	end
end

function PartnerCard:UpdateLivePosUseInfo(nMapId, nMapTemplateId, nPosX, nPosY)
	local nPosIdx = PartnerCard:GetPosIndex(nMapTemplateId, nPosX, nPosY)
	if not nPosIdx then
		return
	end
	 PartnerCard.tbUsePosInfo[nMapId] =  PartnerCard.tbUsePosInfo[nMapId] or {}
	 PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_LIVE_PRIOR] = PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_LIVE_PRIOR] or {}
	 PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_LIVE_PRIOR][nPosIdx] = PartnerCard.POS_TYPE_LIVE_PRIOR
end

function PartnerCard:GetPosIndex(nMapTemplateId, nPosX, nPosY)
	local tbMapPos = self.tbNpcPos[nMapTemplateId]
	if not tbMapPos then
		return
	end
	local nPosIdx
	local tbPriorPos = tbMapPos[PartnerCard.POS_TYPE_LIVE_PRIOR] or {}
	 for nIdx, v in ipairs(tbPriorPos) do
	 	if nPosX == v[1] and nPosY == v[2] then
	 		nPosIdx = nIdx
	 		break
	 	end
	 end
	 return nPosIdx
end

function PartnerCard:RemoveLivePos(nMapId, nMapTemplateId, nPosX, nPosY)
	local nPosIdx = PartnerCard:GetPosIndex(nMapTemplateId, nPosX, nPosY)
	if not nPosIdx then
		return
	end
	 PartnerCard.tbUsePosInfo[nMapId] =  PartnerCard.tbUsePosInfo[nMapId] or {}
	 PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_LIVE_PRIOR] = PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_LIVE_PRIOR] or {}
	 PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_LIVE_PRIOR][nPosIdx] = nil
end

function PartnerCard:RemoveUsePos(nMapId, nPosType, nIdx)
	local tbPCUsePos = PartnerCard.tbUsePosInfo[nMapId] or {}
	if tbPCUsePos[nPosType] then
		tbPCUsePos[nPosType][nIdx] = nil
	end
end

function PartnerCard:GetLivePos(nMapId, nMapTemplateId)
	local tbMapPos = self.tbNpcPos[nMapTemplateId]
	if not tbMapPos then
		return
	end
	local tbPriorPos = tbMapPos[PartnerCard.POS_TYPE_LIVE_PRIOR] or {}
	if not next(tbPriorPos) then
		return
	end
	PartnerCard.tbUsePosInfo[nMapId] = PartnerCard.tbUsePosInfo[nMapId] or {}
	PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_LIVE_PRIOR] = PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_LIVE_PRIOR] or {}
	local tbUsePriorPos = PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_LIVE_PRIOR] 
	local tbCanUsePriorPos = {} 																				-- 可以使用的无障碍的点
	for nIdx, v in ipairs(tbPriorPos) do
		local nX, nY = unpack(v)
		local bCanUse = CheckBarrier(nMapId, nX, nY);
		local bCanPut = Decoration:CheckCanUseDecoration(nMapId, nX, nY, nil, PartnerCard.nNpcFurnitureId)
		if bCanUse and not tbUsePriorPos[nIdx] and bCanPut then
			table.insert(tbCanUsePriorPos, {nX, nY, nIdx})
		end
	end
	local nPosX, nPosY, nIdx
	if next(tbCanUsePriorPos) then
		nPosX, nPosY, nIdx = unpack(tbCanUsePriorPos[1])
		tbUsePriorPos[nIdx] = PartnerCard.POS_TYPE_LIVE_PRIOR
	end
	return nPosX, nPosY
end

function PartnerCard:CheckLiveUse(dwID, nPosX, nPosY)
	local tbCardData = self:GetHouseCardData(dwID)
	if not tbCardData then
		return false
	end
	for nCardId, v in pairs(tbCardData) do
		if v.nPosX == nPosX and v.nPosY == nPosY then
			return true
		end
	end
	return false
end

function PartnerCard:GetVisitPos(nMapId, nMapTemplateId, dwID)
	local tbMapPos = self.tbNpcPos[nMapTemplateId]
	if not tbMapPos then
		return
	end
	local tbPriorPos = tbMapPos[PartnerCard.POS_TYPE_VISIT_PRIOR] or {}
	local tbDefaultPos = tbMapPos[PartnerCard.POS_TYPE_VISIT_DEFAULT] or {}

	PartnerCard.tbUsePosInfo[nMapId] = PartnerCard.tbUsePosInfo[nMapId] or {}
	PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_VISIT_PRIOR] = PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_VISIT_PRIOR] or {}
	PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_VISIT_DEFAULT] = PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_VISIT_DEFAULT] or {}

	local tbUsePriorPos = PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_VISIT_PRIOR] 					-- 已经使用的优先点
	local tbUseDefaultPos = PartnerCard.tbUsePosInfo[nMapId][PartnerCard.POS_TYPE_VISIT_DEFAULT] 				-- 已经使用的默认点
	local tbCanUsePriorPos = {} 																				-- 可以使用的无障碍的点
	for nIdx, v in ipairs(tbPriorPos) do
		local nX, nY = unpack(v)
		local bCanUse = CheckBarrier(nMapId, nX, nY);
		local bCanPut = Decoration:CheckCanUseDecoration(nMapId, nX, nY, nil, PartnerCard.nNpcFurnitureId)
		local bLiveUse = PartnerCard:CheckLiveUse(dwID, nX, nY)
		if bCanUse and not tbUsePriorPos[nIdx] and bCanPut and not bLiveUse then
			table.insert(tbCanUsePriorPos, {nX, nY, nIdx, PartnerCard.POS_TYPE_VISIT_PRIOR})
		end
	end
	local nPosX, nPosY, nIdx, nPosType
	if not next(tbCanUsePriorPos) then
		local tbCanUseDefaultPos = {}
		for nIdx,v in ipairs(tbDefaultPos) do
			if not tbUseDefaultPos[nIdx] then
				local nX, nY = unpack(v)
				table.insert(tbCanUseDefaultPos, {nX, nY, nIdx, PartnerCard.POS_TYPE_VISIT_DEFAULT})
			end
		end
		if not next(tbCanUseDefaultPos) then
			nIdx = MathRandom(#tbDefaultPos)
			nPosX, nPosY = unpack(tbDefaultPos[nIdx])
			nPosType = PartnerCard.POS_TYPE_VISIT_DEFAULT
		else
			nPosX, nPosY, nIdx, nPosType = unpack(tbCanUseDefaultPos[1])
		end
		tbUseDefaultPos[nIdx] = nPosType
	else
		nPosX, nPosY, nIdx, nPosType = unpack(tbCanUsePriorPos[1])
		tbUsePriorPos[nIdx] = nPosType
	end
	return nPosX, nPosY, nIdx, nPosType
end

function PartnerCard:OnClientCall(pPlayer, szFunc, ...)
	if not self.tbAllowClientCallFunc[szFunc] then
		Log("PartnerCard fnOnClientCall Valid Call!!", pPlayer.dwID, pPlayer.szName, szFunc)
		return
	end
	self[szFunc](self, pPlayer, ...)
end

function PartnerCard:SynCardGiftData(pPlayer)
	self:CheckResetGiftTimes(pPlayer)
	local tbData = pPlayer.GetScriptTable("PartnerCardGift");
	local tbCardGiftData = tbData.tbCardGiftData or {}
	local tbCardTimes = tbCardGiftData.tbCardTimes or {}
	pPlayer.CallClientScript("PartnerCard:OnSynCardGiftData", tbCardTimes)
end

function PartnerCard:OnLogin(pPlayer)
	self:RefreshTaskFinishIdx(pPlayer)
	self:UpdatePlayerAttribute(pPlayer);
	PartnerCard:RandomLiveCardActType(pPlayer.dwID)
	self:SynTaskCardData(pPlayer)
end

function PartnerCard:DismissCardBatch(pPlayer, tbCard)
	for nCardId in pairs(tbCard) do
		local bRet, szMsg, tbCardInfo = PartnerCard:CanDismissCard(pPlayer, nCardId)
		if not bRet then
			pPlayer.CenterMsg(szMsg, true)
			return
		end
	end
	local szLog = ""
	local tbReturn = {}
	for nCardId in pairs(tbCard) do
		local tbCardInfo = self:GetCardInfo(nCardId)
		local nLevel = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep)
		local nCurExp = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep)
		local tbDimissReturn = PartnerCard:GetDimissReturn(tbCardInfo.tbCost) or {}
		local tbCardReturn = PartnerCard:GetCardReturn(nCardId, nLevel) or {}
		Lib:MergeTable(tbReturn, tbDimissReturn)
		Lib:MergeTable(tbReturn, tbCardReturn)
		self:DoDimissCard(pPlayer, nCardId)
		-- 可以遣散就代表拥有过该门客，这是因为这个数据是功能发布外网后才添加记录的	
		self:SetCardSaveInfo(pPlayer, nCardId, PartnerCard.nGetFlagIdxStep, 1)
		szLog = szLog ..string.format("%d_%d_%d|", nCardId, nLevel, nCurExp)
	end
	if next(tbReturn) then
		pPlayer.SendAward(tbReturn, false, true, Env.LogWay_DismissPartnerCard)
	end
	pPlayer.CallClientScript("PartnerCard:OnDimissCardBatch")
	pPlayer.TLog("PartnerCardFlow", PartnerCard.nLogTypeDismissCard, PartnerCard.nLogSubTypeDismissCardBatch, 0, 0, 0, 0, szLog)
	Log("PartnerCard fnDismissCardBatch ", pPlayer.dwID, pPlayer.szName, szLog)
end

function PartnerCard:DismissCard(pPlayer, nCardId)
	local bRet, szMsg, tbCardInfo = PartnerCard:CanDismissCard(pPlayer, nCardId)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return
	end
	local nLevel = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep)
	local nCurExp = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep)
	self:DoDimissCard(pPlayer, nCardId)
	-- 可以遣散就代表拥有过该门客，这是因为这个数据是功能发布外网后才添加记录的	
	self:SetCardSaveInfo(pPlayer, nCardId, PartnerCard.nGetFlagIdxStep, 1)
	local tbReturn = PartnerCard:GetDimissReturn(tbCardInfo.tbCost) or {}
	local tbCardReturn = PartnerCard:GetCardReturn(nCardId, nLevel) or {}
	Lib:MergeTable(tbReturn, tbCardReturn)
	if next(tbReturn) then
		pPlayer.SendAward(tbReturn, false, true, Env.LogWay_DismissPartnerCard)
	end
	pPlayer.CallClientScript("PartnerCard:OnDimissCard", nCardId)
	pPlayer.TLog("PartnerCardFlow", PartnerCard.nLogTypeDismissCard, PartnerCard.nLogSubTypeDismissCardSingle, nCardId, nLevel, 0, nCurExp)
	Log("PartnerCard fnDismissCard ", pPlayer.dwID, pPlayer.szName, nCardId, nLevel)
end

function PartnerCard:DoDimissCard(pPlayer, nCardId)
	self:SetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep, 0)
	self:SetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep, 0)
	self:SetCardSaveInfo(pPlayer, nCardId, PartnerCard.nGetTimeIdxStep, 0)
end

function PartnerCard:IdipDismissCard(pPlayer, nCardId)
	local tbCardInfo = self:GetCardInfo(nCardId)
	if not tbCardInfo then
		Log("[PartnerCard] fnIdipDismissCard no tbCardInfo", pPlayer.dwID, pPlayer.szName, nCardId)
		return 
	end
	if not PartnerCard:IsOpen() then
		Log("[PartnerCard] fnIdipDismissCard no Open", pPlayer.dwID, pPlayer.szName, nCardId)
		return 
	end
	if not PartnerCard:IsHaveCard(pPlayer, nCardId) then
		Log("[PartnerCard] fnIdipDismissCard no Have Card", pPlayer.dwID, pPlayer.szName, nCardId)
		return 
	end
	PartnerCard:TryDownPos(pPlayer, nCardId)
	PartnerCard:LeaveHouseForce(pPlayer, nCardId)
	local nLevel = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep)
	local nCurExp = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep)
	self:DoDimissCard(pPlayer, nCardId)
	pPlayer.TLog("PartnerCardFlow", PartnerCard.nLogTypeDismissCard, PartnerCard.nLogSubTypeDismissCardIdip, nCardId, nLevel, 0, nCurExp)
	Log("[PartnerCard] fnIdipDismissCard ok", pPlayer.dwID, pPlayer.szName, nCardId)
end

function PartnerCard:TryDownPos(pPlayer, nCardId)
	local nCardPos = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nOnPosIdxStep)
	if nCardPos > 0 then
		PartnerCard:DownPos(pPlayer, nCardPos, nCardId)
	end
end

function PartnerCard:LeaveHouseForce(pPlayer, nCardId)
	local bLive = PartnerCard:IsCardLiveHouse(pPlayer, nCardId)
	if not bLive then 
		return
	end
	
	local tbCardData = self:GetHouseCardData(pPlayer.dwID)
	if not tbCardData then
		return
	end
	if not tbCardData[nCardId] then
		return
	end
	tbCardData[nCardId].nActState = PartnerCard.CARD_ACT_STATE_NONE
	tbCardData[nCardId].nActTime = 0
	tbCardData[nCardId].nTriggerDevilTime = 0
	tbCardData[nCardId].nActSubType = 0
	tbCardData[nCardId].nActSubTime = 0
	tbCardData[nCardId].bTrigger = nil
	tbCardData[nCardId].bGetEventAward = nil
	self:AddModifyHouseData(pPlayer.dwID)
	PartnerCard:LeaveHouse(pPlayer, nCardId)
end

-- 如果已经拥有门客，返回转换奖励
function PartnerCard:GetCardRepeatAward(pPlayer, nCardId)
	local tbCardInfo = self:GetCardInfo(nCardId)
	if not tbCardInfo then
		return 
	end
	local bHadCard = PartnerCard:IsHaveCard(pPlayer, nCardId)
	if bHadCard then
		return tbCardInfo.tbRepeat
	end
end

function PartnerCard:SendCardNotice(pPlayer, nCardId)
	local tbCardInfo = self:GetCardInfo(nCardId)
	if not tbCardInfo then
		return
	end
	local nQualityLevel = PartnerCard:GetQualityByCardId(nCardId)
	if nQualityLevel ~= 0 and nQualityLevel <= 3 then
		local szMsg = string.format("Chúc mừng「%s」nhận được môn khách %s-%s", pPlayer.szName, Partner.tbQualityLevelDes[nQualityLevel] or "", tbCardInfo.szName)
		KPlayer.SendWorldNotify(1, 999, szMsg, ChatMgr.ChannelType.Public, 1);
		if pPlayer.dwKinId > 0 then
			ChatMgr:SendSystemMsg(ChatMgr.SystemMsgType.Kin, szMsg, pPlayer.dwKinId);
		end
	end
end

-- 发送门客奖励，重复则拆解
function PartnerCard:SendCard(pPlayer, nCardId, nLevel, nLogReazon, nLogReazon2, bShowUi, nExp)
	local tbCardInfo = self:GetCardInfo(nCardId)
	if not tbCardInfo then
		pPlayer.CenterMsg("Môn khách không biết", true)
		Log("PartnerCard fnSendCard fail unknow cardid ", pPlayer.dwID, pPlayer.szName, nCardId, nLevel, nLogReazon, nLogReazon2, bShowUi)
		return 
	end
	if not self:IsOpen() then
		pPlayer.CenterMsg("Chưa mở tính năng môn khách", true)
		Log("PartnerCard fnSendCard fail no open ", pPlayer.dwID, pPlayer.szName, nCardId, nLevel, nLogReazon, nLogReazon2, bShowUi)
		return 
	end
	local bHadCard = PartnerCard:IsHaveCard(pPlayer, nCardId)
	if bHadCard then
		local tbRepeatAward = tbCardInfo.tbRepeat
		if tbRepeatAward then
			pPlayer.SendAward(tbRepeatAward, true, nil, Env.LogWay_PartnerCardSendRepeat)
			pPlayer.CenterMsg(string.format("Đã có môn khách [%s], tự động chuyển thành đạo cụ đồng giá", tbCardInfo.szName), true)
		else
			pPlayer.CenterMsg(string.format("Đã có môn khách [%s], tự động chuyển thành đạo cụ đồng giá", tbCardInfo.szName), true)
		end
	else
		self:DoAddCard(pPlayer, nCardId, nLevel, nExp)
		pPlayer.CallClientScript("PartnerCard:OnAddCard", nCardId, not bShowUi)
		Task:DoAddExtPoint(pPlayer, 3308, 1)
		PartnerCard:SendCardNotice(pPlayer, nCardId)
	end
	pPlayer.TLog("PartnerCardFlow", PartnerCard.nLogTypeAddCard, PartnerCard.nLogSubTypeSendCard, nCardId, nLevel or PartnerCard.CARD_START_LEVEL, bHadCard and 1 or 0)
	Log("[PartnerCard] fnSendCard Ok.", pPlayer.dwID, pPlayer.szName, nCardId, nLevel or PartnerCard.CARD_START_LEVEL, tostring(bHadCard), nLogReazon, nLogReazon2)
end

-- 发送门客，没有则发，有则不发，更新友好度
function PartnerCard:UpdateCard(pPlayer, nCardId, nAddExp)
	local tbCardInfo = self:GetCardInfo(nCardId)
	if not tbCardInfo then
		Log("PartnerCard fnPartnerCard fail unknow cardid ", pPlayer.dwID, pPlayer.szName, nCardId, nAddExp)
		return
	end
	if not self:IsOpen() then
		Log("PartnerCard fnSendCard fail no open ", pPlayer.dwID, pPlayer.szName, nCardId, nAddExp)
		return 
	end
	local bHadCard = PartnerCard:IsHaveCard(pPlayer, nCardId)
	if bHadCard then
		PartnerCard:AddCardExp(pPlayer, nCardId, nAddExp, "UpdateCard")
	else
		PartnerCard:SendCard(pPlayer, nCardId, nil, Env.LogWay_IdipPartnerCard, nil, true, nAddExp)
	end
	local nLevel = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep)
	local nCurExp = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep) 
	Log("PartnerCard fnSendCard ok", pPlayer.dwID, pPlayer.szName, nCardId, nAddExp, tostring(bHadCard), nLevel, nCurExp)
end

-- 获得门客，需要消耗且不能重复
function PartnerCard:AddCard(pPlayer, nCardId, nLevel)
	if not PartnerCard:CheckCardOpen(nCardId) then
		pPlayer.CenterMsg("Môn khách này không thể thông qua phương thức chiêu mộ", true)
		return 
	end
	if PartnerCard:IsHaveCard(pPlayer, nCardId) then
		pPlayer.CenterMsg("Ngài đã có môn khách này", true)
		Log("[PartnerCard] AddCard fnAddCard Repeat !!!", pPlayer.dwID, pPlayer.szAccount, pPlayer.szName, nCardId, nLevel);
		return
	end
	local bRet, szMsg, tbCost, szName = PartnerCard:CanAddCard(pPlayer, nCardId)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	if tbCost then
		for _, tbInfo in ipairs(tbCost) do
			local nType = Player.AwardType[tbInfo[1]];
			if nType == Player.award_type_item then
				local nCount = pPlayer.ConsumeItemInBag(tbInfo[2], tbInfo[3], Env.LogWay_UnlockPartnerCardPos);
				if nCount < tbInfo[3] then
					pPlayer.CenterMsg("Khấu trừ đạo cụ thất bại!");
					Log("[PartnerCard] fnAddCard ConsumeItemInBag Fail !!!", pPlayer.dwID, pPlayer.szAccount, pPlayer.szName, nCardPos, tbInfo[2], tbInfo[3], nCount);
					return;
				end
			elseif nType == Player.award_type_money then
				local bResult = pPlayer.CostMoney(tbInfo[1], tbInfo[2], Env.LogWay_UnlockPartnerCardPos);
				if not bResult then
					pPlayer.CenterMsg("Khấu trừ tiền tệ thất bại!");
					Log("[PartnerCard] fnAddCard CostMoney Fail !!!", pPlayer.dwID, pPlayer.szAccount, pPlayer.szName, nCardPos, tbInfo[1], tbInfo[2]);
					return;
				end
			end
		end
	end
	self:DoAddCard(pPlayer, nCardId, nLevel)
	pPlayer.CallClientScript("PartnerCard:OnAddCard", nCardId)
	Task:DoAddExtPoint(pPlayer, 3308, 1)
	PartnerCard:SendCardNotice(pPlayer, nCardId)
	pPlayer.TLog("PartnerCardFlow", PartnerCard.nLogTypeAddCard, PartnerCard.nLogSubTypeAddCard, nCardId, nLevel or PartnerCard.CARD_START_LEVEL, 0)
	Log("[PartnerCard] fnAddCard Ok.", pPlayer.dwID, pPlayer.szName, nCardId, nLevel or PartnerCard.CARD_START_LEVEL)
end

function PartnerCard:DoAddCard(pPlayer, nCardId, nLevel, nExp)
	local nNowTime = GetTime()
	self:SetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep, nLevel or PartnerCard.CARD_START_LEVEL)
	self:SetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep, nExp or 0)
	self:SetCardSaveInfo(pPlayer, nCardId, PartnerCard.nGetTimeIdxStep, nNowTime)
	self:SetCardSaveInfo(pPlayer, nCardId, PartnerCard.nGetFlagIdxStep, 1)
end

-- 门客上阵
function PartnerCard:UpPos(pPlayer, nPartnerPos, nCardId)
	if not PartnerCard:IsOpen() then
		pPlayer.CenterMsg("Chưa mở tính năng môn khách", true)
		return
	end
	local _, _, _, tbUnlockPos = PartnerCard:GetShowCardPos(pPlayer)
	local tbCardPos = tbUnlockPos[nPartnerPos] or {}
	local nCardPos = tbCardPos[1]
	if not nCardPos then
		pPlayer.CenterMsg("Môn khách đã đầy", true)
		return 
	end
	if not PartnerCard:IsCardPosUnlock(pPlayer, nCardPos) then
		pPlayer.CenterMsg("Vị trí môn khách chưa mở", true)
		return
	end
	if not PartnerCard:IsHaveCard(pPlayer, nCardId) then
		pPlayer.CenterMsg("Chưa có môn khách này", true)
		return 
	end
	-- 下阵目标卡片
	if PartnerCard:IsCardUpPos(pPlayer, nCardId) then
		pPlayer.CenterMsg("Môn khách này đã ra trận", true)
		--self:DownPos(pPlayer, nTargetCardPos, nCardIdId)
		return
	end
	-- 下阵目标门客位
	if PartnerCard:IsPosHaveCard(pPlayer, nCardPos) then
		--self:DownPos(pPlayer, nCardPos, tbOnPosCardInfo[nCardPos].nCardId)
		pPlayer.CenterMsg("Vị trí này đã có môn khách", true)
		return 
	end
	local nLevel = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep)
	self:SetCardSaveInfo(pPlayer, nCardId,  PartnerCard.nOnPosIdxStep, nCardPos)
	PartnerCard:SetCardPosAsynData(pPlayer, nCardPos, nCardId, nLevel)
	local tbRepeatSkillCard = PartnerCard:UpdatePlayerAttribute(pPlayer)
	FightPower:ChangeFightPower("PartnerCard", pPlayer);
	pPlayer.CallClientScript("PartnerCard:OnUpPos")
	pPlayer.CenterMsg("Ra trận thành công")
	Task:DoAddExtPoint(pPlayer, PartnerCard.nUpPosTaskId, 1)
	if tbRepeatSkillCard[nCardId] then
		pPlayer.MsgBox("Khởi động thuộc tính hộ chủ giống nhau nhận duy nhất loại hình thuộc tính\n[FFFE0D](Giống nhau duy nhất loại hình thuộc tính, đồng hành hộ chủ kỹ năng đẳng cấp cao có hiệu lực)[-]", {{"Xác định"}});
	end
	PartnerCard:CheckPosAchi(pPlayer)
	PartnerCard:CheckActiveSkillAchi(pPlayer)
	PartnerCard:CheckActiveCombineAchi(pPlayer)
end

-- 同时上阵成就
function PartnerCard:CheckPosAchi(pPlayer)
	local tbCount = {}
	local tbOnPosCardInfo = PartnerCard:GetOnPosCardInfo(pPlayer)
	for nCardPos in pairs(tbOnPosCardInfo) do
		local nPartnerPos = PartnerCard:GetPartnerPosByCardPos(nCardPos)
		if nPartnerPos > 0 and nPartnerPos <= Partner.MAX_PARTNER_POS_COUNT then
			tbCount[nPartnerPos] = (tbCount[nPartnerPos] or 0) + 1
		end
	end
	local nAchiCount = 0
	for nPartnerPos, nCount in pairs(tbCount) do
		if nCount >= 5 then
			nAchiCount = nAchiCount + 1
		end
	end
	if nAchiCount > 0 then
		-- 给n个同伴上阵5个门客
		Achievement:SetCount(pPlayer, "Guest_Amount", nAchiCount);
	end
end

-- 同时激活属性成就
function PartnerCard:CheckActiveSkillAchi(pPlayer)
	local _, _, tbProtectSkill = PartnerCard:GetApplySkill(me)
	local nProtectCount = Lib:CountTB(tbProtectSkill)
	if nProtectCount > 0 then
		-- 同时激活n个门客的护主属性
		Achievement:SetCount(pPlayer, "Guest_Property", nProtectCount);
	end
end

function PartnerCard:CheckActiveCombineAchi(pPlayer)
	local tbOnPosCardInfo = PartnerCard:GetOnPosCardInfo(pPlayer)
	local tbSuitAttrib = self:GetOnPosActiveSuitAttrib(tbOnPosCardInfo)
	local nActiveSuitCount = 0
	for _, v in pairs(tbSuitAttrib) do
		nActiveSuitCount = nActiveSuitCount + #v
	end
	if nActiveSuitCount > 0 then
		-- 同时激活n组门客的组合属性
		Achievement:SetCount(pPlayer, "Guest_Combination", nActiveSuitCount);
	end
end

-- 门客下阵
function PartnerCard:DownPos(pPlayer, nCardPos, nCardId)
	if not PartnerCard:IsOpen() then
		pPlayer.CenterMsg("Chưa mở tính năng môn khách", true)
		return
	end
	if not nCardId then
		return 
	end
	if not PartnerCard:IsCardPosUnlock(pPlayer, nCardPos) then
		pPlayer.CenterMsg("Vị trí môn khách chưa mở", true)
		return
	end
	if not PartnerCard:IsHaveCard(pPlayer, nCardId) then
		pPlayer.CenterMsg("Chưa có môn khách này", true)
		return 
	end
	local tbOnPosCardInfo = PartnerCard:IsPosHaveCard(pPlayer, nCardPos)
	if not tbOnPosCardInfo or tbOnPosCardInfo.nCardId ~= nCardId then
		return
	end
	-- 如果已经入住家园先撤离
	-- local tbCardData = self:GetHouseCardData(pPlayer.dwID) or {}
	-- if tbCardData[nCardId] then
	-- 	return
	-- end
	self:SetCardSaveInfo(pPlayer, nCardId,  PartnerCard.nOnPosIdxStep, 0)
	PartnerCard:SetCardPosAsynData(pPlayer, nCardPos, 0, 0)
	PartnerCard:UpdatePlayerAttribute(pPlayer)
	FightPower:ChangeFightPower("PartnerCard", pPlayer);
	pPlayer.CallClientScript("PartnerCard:OnDownPos")
	pPlayer.CenterMsg("Hạ trận thành công")
end

function PartnerCard:DoCardStateCost(pPlayer, nCardId)
	local nActDegree = PartnerCard:GetActCount(pPlayer)
	local tbCost = PartnerCard.tbActCost[nActDegree] or {}
	local nCostGold
	if next(tbCost) then
		for _, tbInfo in ipairs(tbCost) do
			local nType = Player.AwardType[tbInfo[1]];
			if nType == Player.award_type_item then
				local nCount = pPlayer.ConsumeItemInBag(tbInfo[2], tbInfo[3], Env.LogWay_PartnerCardActCost);
				if nCount < tbInfo[3] then
					Log("[PartnerCard] fnAddCard ConsumeItemInBag Fail !!!", pPlayer.dwID, pPlayer.szAccount, pPlayer.szName, tbInfo[2], tbInfo[3], nCount);
					return false, "Khấu trừ đạo cụ thất bại!";
				end
			elseif nType == Player.award_type_money then
				if tbInfo[1] == "Gold" or tbInfo[1] == "gold" then
					nCostGold = tbInfo[2]
				else
					local bResult = pPlayer.CostMoney(tbInfo[1], tbInfo[2], Env.LogWay_PartnerCardActCost);
					if not bResult then
						Log("[PartnerCard] fnAddCard CostMoney Fail !!!", pPlayer.dwID, pPlayer.szAccount, pPlayer.szName, tbInfo[1], tbInfo[2]);
						return false, "Khấu trừ tiền tệ thất bại!"
					end
				end 
			end
		end
	end
	return true, "", nCostGold
end

function PartnerCard:AddCardMuseState(pPlayer, nCardId)
	local bRet, szMsg, tbCardData, nCostGold
	bRet, szMsg, tbCardData = PartnerCard:CheckAddStateCommon(pPlayer, nCardId, PartnerCard.CARD_ACT_STATE_MUSE)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	bRet, szMsg, nCostGold = PartnerCard:DoCardStateCost(pPlayer, nCardId)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	local fnCostCallback = function (nPlayerId, bSuccess, szBillNo, nCardId)
		local pPlayer = KPlayer.GetPlayerObjById(nPlayerId)
		if not pPlayer then
			return false, "Khấu trừ nguyên bảo quá trình bên trong ngươi rơi dây"
		end
		if not bSuccess then
			return false, "Khấu trừ nguyên bảo thất bại"
		end
		local bRet, szMsg, tbCardData = PartnerCard:CheckAddStateCommon(pPlayer, nCardId, PartnerCard.CARD_ACT_STATE_MUSE, nil, true)
		if not bRet then
			return false, szMsg
		end
		local nNowTime =  GetTime()
		tbCardData[nCardId].nActTime = nNowTime
		tbCardData[nCardId].nActState = PartnerCard.CARD_ACT_STATE_MUSE
		local bDevil = self:IsAddDevil(pPlayer, nCardId)
		if bDevil then
			local nTriggerDevilTime = self:GetTriggerDevilTime(nNowTime)
			tbCardData[nCardId].nTriggerDevilTime = nNowTime + nTriggerDevilTime
			Timer:Register(Env.GAME_FPS * nTriggerDevilTime, function (self, nPlayerId, nCardId) self:TriggerDevil(nPlayerId, nCardId) end, self, pPlayer.dwID, nCardId)
		end
		PartnerCard:AddModifyHouseData(pPlayer.dwID)
		DegreeCtrl:ReduceDegree(pPlayer, "PartnerCardAct", 1)
		local tbMapInfo = self:GetHouseMapInfo(pPlayer.dwID)
		if tbMapInfo then
			self:UpdataLiveNpcState(pPlayer.dwID, nCardId)
		end
		self:SynCardHouseData(pPlayer)
		pPlayer.CallClientScript("PartnerCard:OnAddCardMuseState")
		self:OnAddActStateOk(pPlayer, PartnerCard.CARD_ACT_STATE_MUSE)
		local nLevel = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep)
		local nCurExp = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep)
		local szLog = string.format("%d_%d", bDevil and 1 or 0, tbCardData[nCardId].nTriggerDevilTime or 0)
		pPlayer.TLog("PartnerCardFlow", PartnerCard.nLogTypeActState, PartnerCard.nLogSubTypeMuse, nCardId, nLevel, 0, nCurExp, "", 0, szLog)
		Log("PartnerCard fnAddCardMuseState ok", pPlayer.dwID, pPlayer.szName, pPlayer.dwKinId, tostring(bDevil), tbCardData[nCardId].nTriggerDevilTime)
		return true
	end
	if nCostGold then
		 local bRet = pPlayer.CostGold(nCostGold, Env.LogWay_PartnerCardActCost, nil, fnCostCallback, nCardId)
	    if not bRet then
	        pPlayer.CenterMsg("Thanh toán thất bại, mời thử lại")
	    end
	else
		bRet, szMsg = fnCostCallback(pPlayer.dwID, true, nil, nCardId)
		if not bRet then
			pPlayer.CenterMsg(szMsg, true)
			return 
		end
	end
end

function PartnerCard:GetDevilCardInfo(nPlayerId, nCardId)
	local tbDevilInfo = PartnerCard.tbDevilInfo[nPlayerId] or {}
	local tbDevilCardInfo = tbDevilInfo[nCardId] or {}
	return tbDevilCardInfo
end

function PartnerCard:SynDevilCardInfo(pPlayer, nOwnPlayerId, nCardId)
	local tbSynData = {}
	local bRet = PartnerCard:CheckIsDevil(nOwnPlayerId, nCardId)
	if bRet then
		local tbDevilInfo = self:GetDevilCardInfo(nOwnPlayerId, nCardId)
		if tbDevilInfo.nKinId == pPlayer.dwKinId then
			local tbJoinPlayer = tbDevilInfo.tbJoinPlayer or {}
			local tbJoinInfo = tbJoinPlayer[pPlayer.dwID] or {}
			local nCureCount = tbJoinInfo.nCureCount or 0
			local nCureOk = tbJoinInfo.nCureOk or 0
			local tbCardData = self:GetHouseCardData(nOwnPlayerId) or {}
			local nTriggerDevilTime = tbCardData[nCardId] and tbCardData[nCardId].nTriggerDevilTime or 0
			tbSynData.tbIll = tbDevilInfo.tbIll or {}
			tbSynData.nCureCount =  nCureCount
			tbSynData.nCureOk =  nCureOk
			tbSynData.nTriggerDevilTime = nTriggerDevilTime or 0
			tbSynData.nLife = tbDevilInfo.nLife
			tbSynData.nOwnPlayerId = nOwnPlayerId
			tbSynData.nCardId = nCardId
			tbSynData.tbMsg = tbDevilInfo.tbMsg or {}
		end
	end
	
	pPlayer.CallClientScript("PartnerCard:OnSynDevilCardInfo", tbSynData)
end


function PartnerCard:CureDevil(pPlayer, nOwnPlayerId, nCardId, nCureType)
	local tbCardInfo = self:GetCardInfo(nCardId)
	if not tbCardInfo then
		pPlayer.CenterMsg("Không biết môn khách??", true)
		return
	end
	local bRet, nTriggerDevilTime = PartnerCard:CheckIsDevil(nOwnPlayerId, nCardId)
	if not bRet then
		pPlayer.CenterMsg("Tâm ma đã biến mất", true)
		return
	end
	local tbDevilInfo = PartnerCard:GetDevilCardInfo(nOwnPlayerId, nCardId)
	local pStayInfo = KPlayer.GetPlayerObjById(nOwnPlayerId) or KPlayer.GetRoleStayInfo(nOwnPlayerId)
	local nOwnKinId = tbDevilInfo.nKinId or 0
	local bSameKin = pPlayer.dwKinId == nOwnKinId and nOwnKinId ~= 0
	if not bSameKin then
		if pPlayer.dwID == nOwnPlayerId then
			pPlayer.CenterMsg("Bạn đã rời bang, không thể hiệp trợ", true)
		else
			pPlayer.CenterMsg("Bạn và môn khách chủ nhân không cùng bang, không thể hiệp trợ", true)
		end
		return
	end
	
	local nLife = tbDevilInfo.nLife
	if not nLife then
		pPlayer.CenterMsg("Tâm ma biến mất??", true)
		return
	end
	if nLife <= 0 then
		pPlayer.CenterMsg("Tâm ma đã bị chế phục", true)
		return
	end
	local tbIll = tbDevilInfo.tbIll or {}
	if not next(tbIll) then
		pPlayer.CenterMsg("Tâm ma không cần trị liệu??", true)
		return 
	end
	tbDevilInfo.tbJoinPlayer = tbDevilInfo.tbJoinPlayer or {}
	tbDevilInfo.tbJoinPlayer[pPlayer.dwID] = tbDevilInfo.tbJoinPlayer[pPlayer.dwID] or {}
	local tbJoinInfo = tbDevilInfo.tbJoinPlayer[pPlayer.dwID]
	local nCureCount = tbJoinInfo.nCureCount or 0
	if nCureCount >= PartnerCard.DEVIL_MAX_CURE then
		pPlayer.CenterMsg("Đã đạt tới lớn nhất chế phục số lần, không cách nào tiếp tục chế phục", true)
		return 
	end
	local nIllIndex = PartnerCard:GetDevilIllIndex(nTriggerDevilTime)
	local nIll = tbIll[nIllIndex]
	if not nIll then
		pPlayer.CenterMsg("Không biết trạng thái", true)
		Log("PartnerCard fnCureDevil unknow ill", pPlayer.dwID, pPlayer.szName, nIllIndex, nTriggerDevilTime, nCureCount, nIllIndex)
		return 
	end
	tbJoinInfo.nCureCount = (tbJoinInfo.nCureCount or 0) + 1
	local nMsgType = PartnerCard.DEVIL_CURE_WRONG
	if nIll == nCureType then
		tbJoinInfo.nCureOk = (tbJoinInfo.nCureOk or 0) + 1
		tbDevilInfo.nLife = tbDevilInfo.nLife - 1
		pPlayer.CenterMsg(string.format("Thao tác thành công, %s cuồng bạo giá trị thấp xuống", tbCardInfo.szName), true)
		nMsgType = PartnerCard.DEVIL_CURE_RIGHT
	else
		tbDevilInfo.nLife = math.min(tbDevilInfo.nLife + 1, PartnerCard.DEVIL_MAX_LIFE)
		pPlayer.CenterMsg(string.format("Thao tác thất bại, %s cuồng bạo giá trị tăng lên", tbCardInfo.szName), true)
	end
	if tbDevilInfo.nLife <= 0 then
		self:SendDevilAward(nOwnPlayerId, nCardId)
	end
	local szMsg = PartnerCard.tbDevilMsg[nCureType] and PartnerCard.tbDevilMsg[nCureType][nMsgType]
	tbDevilInfo.tbMsg = tbDevilInfo.tbMsg or {}
	if #tbDevilInfo.tbMsg >= PartnerCard.DEVIL_MAX_SHOW_MSG then
		table.remove(tbDevilInfo.tbMsg, 1)
	end
	table.insert(tbDevilInfo.tbMsg, string.format(szMsg or "", pPlayer.szName, tbCardInfo.szName, tbCardInfo.szName))
	self:DevilMsgChange(nOwnPlayerId, nCardId, tbDevilInfo.tbMsg)
	PartnerCard:DeviLifeChange(nOwnPlayerId, nCardId, tbDevilInfo.nLife)
	pPlayer.CallClientScript("PartnerCard:OnCureDevil", tbJoinInfo.nCureCount, tbJoinInfo.nCureOk, nIllIndex)
	Log("PartnerCard fnCureDevil ok", pPlayer.dwID, pPlayer.szName, nOwnPlayerId, nCardId, nCureType, nIll)
end

function PartnerCard:DeviLifeChange(nOwnPlayerId, nCardId, nLife)
	local tbMapInfo = self:GetHouseMapInfo(nOwnPlayerId)
	if tbMapInfo then
		KPlayer.MapBoardcastScript(tbMapInfo.nMapId , "PartnerCard:OnDeviLifeChange", nOwnPlayerId, nCardId, nLife)
	end
end

function PartnerCard:DevilMsgChange(nOwnPlayerId, nCardId, tbMsg)
	local tbMapInfo = self:GetHouseMapInfo(nOwnPlayerId)
	if tbMapInfo then
		KPlayer.MapBoardcastScript(tbMapInfo.nMapId , "PartnerCard:OnDevilMsgChange", nOwnPlayerId, nCardId, tbMsg)
	end
end

function PartnerCard:SendDevilAward(nOwnPlayerId, nCardId)
	local pStayInfo = KPlayer.GetPlayerObjById(nOwnPlayerId) or KPlayer.GetRoleStayInfo(nOwnPlayerId)
	if not pStayInfo then
		return
	end
	local tbCardInfo = self:GetCardInfo(nCardId)
	if not tbCardInfo then
		return
	end
	local tbMapInfo = self:GetHouseMapInfo(nOwnPlayerId)
	if tbMapInfo then
		KPlayer.MapBoardcastScript(tbMapInfo.nMapId , "PartnerCard:OnEndDecil", nOwnPlayerId, nCardId)
	end
	local tbDevilInfo = PartnerCard:GetDevilCardInfo(nOwnPlayerId, nCardId)
	if not tbDevilInfo.nLife or tbDevilInfo.nLife > 0 then
		ChatMgr:SendSystemMsg(ChatMgr.SystemMsgType.Kin, string.format("%s gia viên %s môn khách nhập ma trạng thái đã tự hành tiêu trừ", pStayInfo.szName, tbCardInfo.szName), tbDevilInfo.nKinId)
		Log("PartnerCard fnSendDevilAward Remain Life", nOwnPlayerId, nCardId)
		return
	end
	if tbDevilInfo.bAward then
		return
	end
	local tbCardData = self:GetHouseCardData(nOwnPlayerId) or {}
	local nTriggerDevilTime = tbCardData[nCardId] and tbCardData[nCardId].nTriggerDevilTime
	nTriggerDevilTime = nTriggerDevilTime or 0
	local nNowTime = GetTime()
	local bDevilAchi = (nNowTime - nTriggerDevilTime <= 300) and true or false 			-- 5分钟之内有成就
	tbDevilInfo.bAward = true
	local tbJoinPlayer = tbDevilInfo.tbJoinPlayer or {}
	for dwID, v in pairs(tbJoinPlayer) do
		local pStayInfo = KPlayer.GetPlayerObjById(dwID) or KPlayer.GetRoleStayInfo(dwID)
		if pStayInfo then
			local nCureOk = v.nCureOk or 0
			if pStayInfo.dwKinId == tbDevilInfo.nKinId and nCureOk > 0 then
				local tbAward = PartnerCard:GetDevilAward(nOwnPlayerId == dwID , nCureOk)
				local tbMail = {
					To = dwID;
					Title = "Môn khách tâm ma thưởng";
					From = "Quản lý gia viên";
					Text = "Lần này môn khách tâm ma được thành công chế phục, căn cứ ngươi tại lần này chế phục quá trình biểu hiện, đặc biệt cho trở xuống ban thưởng, mời kiểm tra và nhận phụ kiện!";
					tbAttach = tbAward;
					nLogReazon = Env.LogWay_PartnerCardDevil;
				};
				Mail:SendSystemMail(tbMail);
				if bDevilAchi then
					Achievement:AddCount(dwID, "Guest_Task4", 1);
				end
				Log("PartnerCard fnSendDevilAward ok", nOwnPlayerId, dwID, nCardId, tbDevilInfo.nKinId, nCureOk)
			else
				Log("PartnerCard fnSendDevilAward Valid", nOwnPlayerId, dwID, nCardId, tbDevilInfo.nKinId, pStayInfo.dwKinId, nCureOk)
			end
		end
	end
	ChatMgr:SendSystemMsg(ChatMgr.SystemMsgType.Kin, string.format("%s gia viên %s môn khách đã bị thành công chế phục, ban thưởng đã thông qua thư tín hình thức cấp cho", pStayInfo.szName, tbCardInfo.szName), tbDevilInfo.nKinId)
	Log("PartnerCard Do fnSendDevilAward ", nOwnPlayerId, nCardId, tbDevilInfo.nKinId, nTriggerDevilTime)
end

function PartnerCard:TriggerDevil(nPlayerId, nCardId)
	local pStayInfo = KPlayer.GetPlayerObjById(nPlayerId) or KPlayer.GetRoleStayInfo(nPlayerId)
	if not pStayInfo then
		Log("PartnerCard fnTriggerDevil fail",nPlayerId, nCardId, pStayInfo and 1 or 0, pStayInfo and pStayInfo.dwKinId or -1)
		return 
	end
	local tbCardData = self:GetHouseCardData(nPlayerId)
	if not tbCardData or not tbCardData[nCardId] then
		Log("PartnerCard fnTriggerDevil no tbCardData",nPlayerId, nCardId, pStayInfo and 1 or 0, pStayInfo and pStayInfo.dwKinId or -1)
		return 
	end
	-- 有可能触发心魔之后门客被idip强制删了
	if not PartnerCard:IsActing(nPlayerId, nCardId, PartnerCard.CARD_ACT_STATE_MUSE) then
		Log("PartnerCard fnTriggerDevil no acting",nPlayerId, nCardId, pStayInfo and 1 or 0, pStayInfo and pStayInfo.dwKinId or -1)
		return
	end
	PartnerCard.tbDevilInfo[nPlayerId] = PartnerCard.tbDevilInfo[nPlayerId] or {}
	local tbIll = self:RandomIllState()
	PartnerCard.tbDevilInfo[nPlayerId][nCardId] = {
		tbIll = tbIll;
		tbJoinPlayer = {};
		nLife = PartnerCard.DEVIL_INIT_LIFE;
		nKinId = pStayInfo.dwKinId;
	}
	local tbCardData = self:GetHouseCardData(nPlayerId) or {}
	local tbCardInfo = tbCardData[nCardId] or {}
	local nPosX = tbCardInfo.nPosX or 0
	local nPosY = tbCardInfo.nPosY or 0
	local nMapId = 0 
	local tbLive = PartnerCard:GetHouseLiveNpcInfo(nPlayerId) or {}
	local nNpcId = tbLive[nCardId] and tbLive[nCardId].nNpcId or 0
	local pNpc = KNpc.GetById(nNpcId or 0)
	if pNpc then
		nMapId, nPosX, nPosY = pNpc.GetWorldPos()
	end
	local szMsg = string.format("%s môn khách tại gia viên minh tưởng lúc, không cẩn thận tẩu hỏa nhập ma, các vị đại hiệp nhanh đi hiệp trợ chế phục <%s nhà (%s,%s)>", pStayInfo.szName, pStayInfo.szName, math.floor(nPosX*Map.nShowPosScale), math.floor(nPosY*Map.nShowPosScale))
	local tbLinkData = {nLinkType = ChatMgr.LinkType.HyperText, linkParam={szHyperText = string.format("[url=goHouseCardPos:PartnerCard, %s;%s][-]", nPlayerId, nCardId)}}
	ChatMgr:SendSystemMsg(ChatMgr.SystemMsgType.Kin, szMsg, pStayInfo.dwKinId, tbLinkData);
	Timer:Register(Env.GAME_FPS * PartnerCard.nDevilStayTime, function () self:OnDevilEnd(nPlayerId, nCardId) end , self, nPlayerId, nCardId)
	self:UpdataLiveNpcState(nPlayerId, nCardId)
	Log("PartnerCard fnTriggerDevil ok", nPlayerId, pStayInfo.szName, nCardId, #tbIll, nPosX, nPosY)
end

function PartnerCard:OnDevilEnd(nOwnPlayerId, nCardId)
	self:UpdataLiveNpcState(nOwnPlayerId, nCardId)
	local tbDevilInfo = PartnerCard:GetDevilCardInfo(nOwnPlayerId, nCardId)
	if not tbDevilInfo.nLife then
		return
	end
	if not tbDevilInfo.bAward then
		self:SendDevilAward(nOwnPlayerId, nCardId)
	end
	Log("PartnerCard fnOnDevilEnd ", nOwnPlayerId, nCardId, tostring(tbDevilInfo.bAward))
end

function PartnerCard:CheckIsDevil(nPlayerId, nCardId)
	local tbCardData = self:GetHouseCardData(nPlayerId)
	if not tbCardData or not tbCardData[nCardId] then
		return false
	end
	if self:IsActing(nPlayerId, nCardId, PartnerCard.CARD_ACT_STATE_MUSE) then
		local nNowTime = GetTime()
		local nTriggerDevilTime = tbCardData[nCardId].nTriggerDevilTime or 0
		local tbDevilInfo = self:GetDevilCardInfo(nPlayerId, nCardId)
		local nLife = tbDevilInfo.nLife or 0
		if nTriggerDevilTime + PartnerCard.nDevilStayTime > nNowTime and nLife ~= 0 then
			return true, nTriggerDevilTime
		end
	end
end

-- 有家族才有机会触发
function PartnerCard:IsAddDevil(pPlayer, nCardId)
	if pPlayer.dwKinId <= 0 then
		return false
	end
	local nQualityLevel = PartnerCard:GetQualityByCardId(nCardId)
	local nTriggerDevilRate = PartnerCard.tbTriggerDevilRate[nQualityLevel] or 0
	local nHit = MathRandom(1, self.nTriggerDevilTotalRate)
	return nHit <= nTriggerDevilRate
end

function PartnerCard:GetTriggerDevilTime(nActTime)
	local nStartTime = nActTime
	-- 保证派遣结束之前活动结束
	local nTriggerTime = MathRandom(PartnerCard.nDevilBeginTime, PartnerCard.CARD_ACT_ACTIVE_TIME - PartnerCard.nDevilStayTime)
	nTriggerTime = math.max(nTriggerTime, 1)
	return nTriggerTime
end

function PartnerCard:GetCardTripEvent(nCardId)
	local nTotalRate = PartnerCard.STATE_TRIP_TOTAL_RATE
	local nQualityLevel = PartnerCard:GetQualityByCardId(nCardId)
	local nFubenRate = PartnerCard.tbStateTripFubenRate[nQualityLevel] or 0
	local nMapRate = PartnerCard.tbStateTripMapRate[nQualityLevel] or 0
	local nHit = MathRandom(1, nTotalRate)
	if nHit <= nFubenRate then
		return PartnerCard.STATE_TRIP_FUBEN
	elseif nHit > nFubenRate and nHit < nFubenRate + nMapRate then
		return PartnerCard.STATE_TRIP_MAP
	end
	return PartnerCard.STATE_TRIP_NONE
end

function PartnerCard:GetCardTripEventTime()
	-- 保证派遣结束之前活动结束
	local nTriggerTime = MathRandom(PartnerCard.STATE_TRIP_FUBEN_BEGIN_TIME, PartnerCard.CARD_ACT_ACTIVE_TIME - PartnerCard.STATE_TRIP_FUBEN_STAY_TIME)
	nTriggerTime = math.max(nTriggerTime, 1)
	return nTriggerTime
end

-- 游历
function PartnerCard:AddCardTripState(pPlayer, nCardId)
	local bRet, szMsg, tbCardData, nCostGold
	bRet, szMsg, tbCardData = PartnerCard:CheckAddStateCommon(pPlayer, nCardId, PartnerCard.CARD_ACT_STATE_TRIP)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	bRet, szMsg, nCostGold = PartnerCard:DoCardStateCost(pPlayer, nCardId)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	local fnCostCallback = function (nPlayerId, bSuccess, szBillNo, nCardId)
		local pPlayer = KPlayer.GetPlayerObjById(nPlayerId)
		if not pPlayer then
			return false, "Khấu trừ nguyên bảo quá trình bên trong ngươi rơi dây"
		end
		if not bSuccess then
			return false, "Khấu trừ nguyên bảo thất bại"
		end
		local bRet, szMsg, tbCardData = PartnerCard:CheckAddStateCommon(pPlayer, nCardId, PartnerCard.CARD_ACT_STATE_TRIP, nil, true)
		if not bRet then
			return false, szMsg
		end
		local nNowTime =  GetTime()
		local nEventType = self:GetCardTripEvent(nCardId)
		local nEventTime 
		if nEventType == PartnerCard.STATE_TRIP_FUBEN then
			nEventTime = self:GetCardTripEventTime()
		end
		if nEventTime then
			Timer:Register(Env.GAME_FPS * nEventTime, function (nPlayerId, nCardId) self:TriggerTripFuben(nPlayerId, nCardId) end, pPlayer.dwID, nCardId)
		end
		
		tbCardData[nCardId].nActTime = nNowTime
		tbCardData[nCardId].nActState = PartnerCard.CARD_ACT_STATE_TRIP
		tbCardData[nCardId].nActSubType = nEventType
		tbCardData[nCardId].nActSubTime = nEventTime and nEventTime + nNowTime
		PartnerCard:AddModifyHouseData(pPlayer.dwID)
		DegreeCtrl:ReduceDegree(pPlayer, "PartnerCardAct", 1)
		self:UpdataLiveNpcState(pPlayer.dwID, nCardId)
		pPlayer.CenterMsg("Điều động thành công", true)
		self:SynCardHouseData(pPlayer)
		pPlayer.CallClientScript("PartnerCard:OnAddCardTripState")
		self:OnAddActStateOk(pPlayer, PartnerCard.CARD_ACT_STATE_TRIP)
		local nLevel = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep)
		local nCurExp = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep)
		local szLog = string.format("%d_%d", nEventType or 0, nEventTime or 0)
		pPlayer.TLog("PartnerCardFlow", PartnerCard.nLogTypeActState, PartnerCard.nLogSubTypeTrip, nCardId, nLevel, 0, nCurExp, "", 0, szLog)
		Log("PartnerCard fnAddCardTripState ok ", pPlayer.dwID, pPlayer.szName, nCardId, nEventType, nEventTime)
		return true
	end
	if nCostGold then
		local bRet = pPlayer.CostGold(nCostGold, Env.LogWay_PartnerCardActCost, nil, fnCostCallback, nCardId)
	    if not bRet then
	        pPlayer.CenterMsg("Thanh toán thất bại, mời thử lại")
	    end
	else
		bRet, szMsg = fnCostCallback(pPlayer.dwID, true, nil, nCardId)
		if not bRet then
			pPlayer.CenterMsg(szMsg, true)
			return 
		end
	end
end

function PartnerCard:GetTripMapAward(pPlayer, nCardId, nNpcId)
	local tbCardData = self:GetHouseCardData(pPlayer.dwID)
	if not tbCardData or not tbCardData[nCardId] then
		return 
	end
	local pNpc = KNpc.GetById(nNpcId)
	if not  pNpc then
		return 
	end
	local nOwnPlayerId = pNpc.nOwnPlayerId or 0
	local nOwnCardId = pNpc.nCardId or 0
	local szType = pNpc.szType or ""
	if pPlayer.dwID ~= nOwnPlayerId or nCardId ~= nOwnCardId then
		return
	end
	if szType ~= PartnerCard.NPC_TYPE_TRIP_MAP then
		return
	end
	tbCardData[nCardId].bGetEventAward = true
	self:AddModifyHouseData(pPlayer.dwID)
	pNpc.bGetAward = true
	PartnerCard:AddCardExp(pPlayer, nCardId, PartnerCard.nTripMapNpcAddExp, "fnGetTripMapAward")
	pPlayer.SendAward(PartnerCard.tbripMapNpcAward, true, false, Env.LogWay_PartnerCardActAward)
	Achievement:AddCount(pPlayer, "Guest_Task1", 1);
end

function PartnerCard:GetActAward(pPlayer, nCardId, nActState)
	local bRet, szMsg, tbCardData = PartnerCard:CanGetActAward(pPlayer, nCardId, nActState)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return
	end
	local nQualityLevel = PartnerCard:GetQualityByCardId(nCardId)
	local tbAward = PartnerCard.tbActAward[nActState] and PartnerCard.tbActAward[nActState][nQualityLevel]
	if tbAward then
		pPlayer.SendAward(tbAward, true, nil, Env.LogWay_OpenLightStone)
	end
	tbCardData[nCardId].nActState = PartnerCard.CARD_ACT_STATE_NONE
	tbCardData[nCardId].nActTime = nil
	tbCardData[nCardId].nTriggerDevilTime = nil
	tbCardData[nCardId].nActSubType = nil
	tbCardData[nCardId].nActSubTime = nil
	tbCardData[nCardId].bTrigger = nil
	tbCardData[nCardId].bGetEventAward = nil
	self:AddModifyHouseData(pPlayer.dwID)
	self:SynCardHouseData(pPlayer, {[nCardId] = tbCardData[nCardId]})
	self:SynActType(pPlayer)
	pPlayer.CallClientScript("PartnerCard:OnGetActAward")
	Log("PartnerCard fbGetActAward ok", pPlayer.dwID, pPlayer.szName, nCardId, nActState, tbAward and 1 or 0, nQualityLevel)
end

function PartnerCard:TriggerTripFuben(nPlayerId, nCardId)
	local pPlayer = KPlayer.GetPlayerObjById(nPlayerId)
	if pPlayer then
       self:DoTriggerTripFubenNotify(pPlayer, nCardId)
	else
		KPlayer.AddDelayCmd(nPlayerId, string.format("PartnerCard:DoTriggerTripFubenNotify(me, %d)", nCardId), string.format("%s|%d|%d", "DoTriggerTripFubenNotify", nPlayerId, nCardId))
	end
end

function PartnerCard:IsTriggerTripMapNpc()
	local nHit = MathRandom(PartnerCard.STATE_TRIP_MAP_NPC_RATE, PartnerCard.STATE_TRIP_MAP_NPC_TOTAL_RATE)
	if nHit <= PartnerCard.STATE_TRIP_MAP_NPC_RATE then
		return true, nHit
	end
	return false, nHit
end

function PartnerCard:DoTriggerTripFubenNotify(pPlayer, nCardId)
	local bRet, szMsg, nActTime = PartnerCard:CheckStartTripFuben(pPlayer, nCardId)
	if not bRet then
		return 
	end
	local tbCardInfo = self:GetCardInfo(nCardId)
	local szName = tbCardInfo.szName or ""
	local tbData = {
			szType = "AssistTripFuben",
			nTimeOut = nActTime + PartnerCard.CARD_ACT_ACTIVE_TIME, --消息超时时间
			nCardId = nCardId,
			szCardName = szName,
		}
	pPlayer.CallClientScript("Ui:SynNotifyMsg", tbData)
end

function PartnerCard:OnEnterMap(pPlayer, nMapTemplateId, nMapId)
	local tbPos = self.tbTripMapSetting[nMapTemplateId]
	if not tbPos or not next(tbPos) then
		return
	end
	local tbCardData = self:GetHouseCardData(pPlayer.dwID)
	if not tbCardData or not next(tbCardData) then
		return 
	end
	PartnerCard.tbTripMapNpc[nMapId] = PartnerCard.tbTripMapNpc[nMapId] or {}
	PartnerCard.tbTripMapNpc[nMapId].tbPlayer = PartnerCard.tbTripMapNpc[nMapId].tbPlayer or {}
	local tbTripPlayer = PartnerCard.tbTripMapNpc[nMapId].tbPlayer
	if tbTripPlayer[pPlayer.dwID] then
		return 
	end
	tbTripPlayer[pPlayer.dwID] = true
	for nCardId, v in pairs(tbCardData) do
		if PartnerCard:IsActing(pPlayer.dwID, nCardId, PartnerCard.CARD_ACT_STATE_TRIP) then
			if v.nActSubType == PartnerCard.STATE_TRIP_MAP and not v.bTrigger then
				local bRet, nHit = PartnerCard:IsTriggerTripMapNpc()
				local tbCardInfo = self:GetCardInfo(nCardId)
				local nNpcTempleteId = tbCardInfo and tbCardInfo.nNpcTempleteId
				if bRet and nNpcTempleteId then
					tbCardData[nCardId].bTrigger = true
					PartnerCard:AddModifyHouseData(pPlayer.dwID)
					PartnerCard.tbTripMapNpc[nMapId].fnPosSelect = PartnerCard.tbTripMapNpc[nMapId].fnPosSelect or Lib:GetRandomSelect(#tbPos)
					local fnPosSelect = PartnerCard.tbTripMapNpc[nMapId].fnPosSelect
					local tbPosInfo = tbPos[fnPosSelect()]
					local nPosX, nPosY, nDir = unpack(tbPosInfo)
					local pNpc = KNpc.Add(nNpcTempleteId, 1, 0, nMapId, nPosX, nPosY, 0, nDir);
					if pNpc then
						pNpc.szType = PartnerCard.NPC_TYPE_TRIP_MAP
						pNpc.nOwnPlayerId = pPlayer.dwID
						pNpc.nCardId = nCardId
						local szTitle = string.format("%s môn khách", pPlayer.szName)
						pNpc.SetTitle(szTitle)
						Log("PartnerCard TriggerTripMap Npc ", pPlayer.dwID, pPlayer.szName, tostring(bRet), nHit, nNpcTempleteId, nMapId, nPosX, nPosY, nDir, pNpc.nId)
					end
					break
				end
				
			end
		end
	end
end

function PartnerCard:OnMapDestroy(nMapId, nMapTemplateId)
	PartnerCard.tbTripMapNpc[nMapId] = nil
end

function PartnerCard:StartTripFuben(pPlayer, nCardId)
	local bRet, szMsg = PartnerCard:CheckStartTripFuben(pPlayer, nCardId)
	if not bRet then 
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	if not Env:CheckSystemSwitch(pPlayer, Env.SW_Muse) then
		pPlayer.CenterMsg("Trạng thái hiện tại không thể vào", true)
		return 
	end
	PartnerCard.tbTripFuben:CreateFuben(pPlayer, nCardId)
end

function PartnerCard:OnTripFubenCreate(nPlayerId, nCardId)
	local tbCardData = PartnerCard:GetHouseCardData(nPlayerId)
	if not tbCardData or not tbCardData[nCardId] then
		return 
	end
	tbCardData[nCardId].bTrigger = true
	self:AddModifyHouseData(nPlayerId)
	local pPlayer = KPlayer.GetPlayerObjById(nPlayerId)
	if pPlayer then
		self:SynCardHouseData(pPlayer, {[nCardId] = tbCardData[nCardId]})
	end
end

-- 拜访
function PartnerCard:AddCardVisitState(pPlayer, nCardId, nQuestionId, nAnswerIdx, szBubble, tbAnswer)
	if not PartnerCard:IsOpen() then
		return 
	end
	local bRet, szMsg, tbVisit, tbCardData, nCostGold
	bRet, szMsg, tbCardData = PartnerCard:CheckAddStateCommon(pPlayer, nCardId, PartnerCard.CARD_ACT_STATE_VISIT)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	bRet, szMsg = PartnerCard:GetVisitFriend(pPlayer)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	if not nQuestionId then
		local tbQuestion = self:RandomOneQuestion()
		nQuestionId = tbQuestion.nQuestionId
		pPlayer.CallClientScript("Ui:OpenWindow", "PartnerCardQuestionPanel", PartnerCard.TYPE_QUESTION, nCardId, nQuestionId)
		return
	end
	bRet, szMsg = PartnerCard:CheckQuestion(nQuestionId, nAnswerIdx, tbAnswer)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	if not Lib:IsEmptyStr(szBubble) then
		bRet, szMsg = PartnerCard:CheckBubble(szBubble)
		if not bRet then
			pPlayer.CenterMsg(szMsg, true)
			return 
		end
	else
		szBubble = nil
	end

	bRet, szMsg, nCostGold = PartnerCard:DoCardStateCost(pPlayer, nCardId)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end

	local fnCostCallback = function (nPlayerId, bSuccess, szBillNo, nCardId, nQuestionId, nAnswerIdx, szBubble, tbAnswer)
		local pPlayer = KPlayer.GetPlayerObjById(nPlayerId)
		if not pPlayer then
			return false, "Khấu trừ nguyên bảo quá trình bên trong ngươi rơi dây"
		end
		if not bSuccess then
			return false, "Khấu trừ nguyên bảo thất bại"
		end
		local bRet, szMsg, tbCardData = PartnerCard:CheckAddStateCommon(pPlayer, nCardId, PartnerCard.CARD_ACT_STATE_VISIT, nil, true)
		if not bRet then
			return false, szMsg
		end
		bRet, szMsg, tbVisit = PartnerCard:GetVisitFriend(pPlayer)
		if not bRet then
			return false, szMsg
		end
		local nNowTime =  GetTime()
		local nBeVisitPlayerId = tbVisit[1].dwID
		local tbVisitData = PartnerCard:GetVisitCardData(nBeVisitPlayerId)
		local nVisitPlayerId = pPlayer.dwID
		table.insert(tbVisitData, {
			nVisitPlayerId = nVisitPlayerId;
			nQuestionId = nQuestionId;
			nAnswerIdx = nAnswerIdx;
			szBubble = szBubble;
			nVisitTime = nNowTime;
			nCardId = nCardId;
			tbAnswer = tbAnswer;
		})
		tbCardData[nCardId].nActTime = nNowTime
		tbCardData[nCardId].nActState = PartnerCard.CARD_ACT_STATE_VISIT
		PartnerCard:AddModifyHouseData(nBeVisitPlayerId)
		PartnerCard:AddModifyHouseData(nVisitPlayerId)
		local tbMapInfo = self:GetHouseMapInfo(nBeVisitPlayerId)
		if tbMapInfo then
			self:AddCardVisitHouseNpc(nBeVisitPlayerId, nVisitPlayerId, tbMapInfo.nMapId, nCardId, tbMapInfo.nMapTemplateId)
		end
		self:UpdataLiveNpcState(nVisitPlayerId, nCardId)
		DegreeCtrl:ReduceDegree(pPlayer, "PartnerCardAct", 1)
		FriendShip:AddImitity(nPlayerId, nBeVisitPlayerId, PartnerCard.nVisitAddImitity, Env.LogWay_PartnerCardActAward);
		pPlayer.CenterMsg("Điều động thành công", true)
		self:SynCardHouseData(pPlayer)
		pPlayer.CallClientScript("PartnerCard:OnAddCardVisitState")
		local pBeVisitor = KPlayer.GetPlayerObjById(nBeVisitPlayerId)
		if pBeVisitor then
			local tbData = {
				szType = "PartnerCardAddVisitor",
				nTimeOut = nNowTime + PartnerCard.VISIT_NOTIFY_TIME, 
				szVisitorName = pPlayer.szName,
				nVisitPlayerId = nVisitPlayerId,
			};

			pBeVisitor.CallClientScript("Ui:SynNotifyMsg", tbData)
		end
		self:OnAddActStateOk(pPlayer, PartnerCard.CARD_ACT_STATE_VISIT)
		local nLevel = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep)
		local nCurExp = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep)
		local szLog = string.format("%d_%d_%d_%d", nBeVisitPlayerId, nVisitPlayerId, nQuestionId, nAnswerIdx)
		pPlayer.TLog("PartnerCardFlow", PartnerCard.nLogTypeActState, PartnerCard.nLogSubTypeVisit, nCardId, nLevel, 0, nCurExp, "", 0, szLog)
		Log("[PartnerCard] fnAddCardVisitState ok", nBeVisitPlayerId, nVisitPlayerId, pPlayer.szName, nCardId, nQuestionId, nAnswerIdx, szBubble)
	end

	if nCostGold then
		 local bRet = pPlayer.CostGold(nCostGold, Env.LogWay_PartnerCardActCost, nil, fnCostCallback, nCardId, nQuestionId, nAnswerIdx, szBubble, tbAnswer)
	    if not bRet then
	        pPlayer.CenterMsg("Thanh toán thất bại, mời thử lại")
	    end
	else
		bRet, szMsg = fnCostCallback(pPlayer.dwID, true, nil, nCardId, nQuestionId, nAnswerIdx, szBubble, tbAnswer)
		if not bRet then
			pPlayer.CenterMsg(szMsg, true)
			return 
		end
	end
end

function PartnerCard:CheckActAwardNotify(pPlayer)
	if not PartnerCard:HaveActAward(pPlayer) then
		return
	end
	local tbData = {
			szType = "PartnerCardActAward",
			nTimeOut = GetTime() + PartnerCard.ACT_AWARD_NOTIFY_TIME, 
			nOwnId = pPlayer.dwID,
		};
	pPlayer.CallClientScript("Ui:SynNotifyMsg", tbData)
	pPlayer.CallClientScript("PartnerCard:OnActAwardCanGet")
end

function PartnerCard:OnAddActStateOk(pPlayer, nActState)
	Timer:Register(Env.GAME_FPS * PartnerCard.CARD_ACT_ACTIVE_TIME, function (self, nPlayerId) 
		local pPlayer = KPlayer.GetPlayerObjById(nPlayerId)
		if pPlayer then
         	self:CheckActAwardNotify(pPlayer)
        else
        	KPlayer.AddDelayCmd(nPlayerId, string.format("PartnerCard:CheckActAwardNotify(me)"), string.format("%s|%d|%d", "OnAddActStateOkNotify", nPlayerId, nActState))
		end
		
	 end, self, pPlayer.dwID);
end

-- 所有可拜访的好友
function PartnerCard:GetVisitFriend(pPlayer)
	local tbVisit = {}
	local tbAllFriends = KFriendShip.GetFriendList(pPlayer.dwID) or {};
	if not next(tbAllFriends) then
		return false, "Ngài không có hảo hữu có thể bái phỏng, lần này điều động thất bại"
	end
	local nNowTime = GetTime()
	for nFriendId in pairs(tbAllFriends) do
		local pStayInfo = KPlayer.GetRoleStayInfo(nFriendId)
		if pStayInfo then
			-- 有家园才有数据
			local tbVisitData = PartnerCard:GetVisitCardData(nFriendId)
			if tbVisitData then
				local nHouseLevel = House:GetHouseLevel(nFriendId) or 0
				local nMaxVisit = PartnerCard.tbMaxVisitHouse[nHouseLevel] or 0
				if #tbVisitData < nMaxVisit then
					local nLastOnlineTime = pStayInfo.nLastOnlineTime or 0
					local pFriend = KPlayer.GetPlayerObjById(nFriendId)
					-- 离线超过7天的好友不做考虑
					local nOffineTime = nNowTime - nLastOnlineTime
					if pFriend or (nOffineTime < 7 * 24 * 60 * 60) then
						-- 在线的或者离线3天之内的优先
						local nPrior = (pFriend or nOffineTime < 3 * 24 * 60 * 60) and 1 or 0
						table.insert(tbVisit, {dwID = nFriendId, nOffineTime = nOffineTime, nPrior = nPrior})
					end
				end
			end
		end
	end
	if not next(tbVisit) then
		return false, "Ngài tất cả hảo hữu trong nhà bái phỏng môn khách đồng đều quá nhiều, lần này điều động thất bại" 
	end
	Lib:SmashTable(tbVisit)
	Lib:SortTable(tbVisit, function (a, b)
			if a.nPrior == b.nPrior then
				return a.nOffineTime < b.nOffineTime 
			end
			return a.nPrior > b.nPrior
		end)
	return true , nil, tbVisit
end

-- 回答拜访问题
function PartnerCard:AnswerVisitQuestion(pPlayer, nCardId, nQuestionId, nAnswerIdx, nVisitPlayerId)
	local tbVisitData = PartnerCard:GetVisitCardData(pPlayer.dwID)
	if not tbVisitData then
		pPlayer.CenterMsg("Mời trước kiến tạo gia viên", true)
		return 
	end
	local tbVisitInfo, nIdx = PartnerCard:CheckHadVisit(pPlayer.dwID, nVisitPlayerId, nCardId)
	if not tbVisitInfo then
		pPlayer.CenterMsg("Bái phỏng thời gian kết thúc", true)
		return
	end
	if tbVisitInfo.nQuestionId ~= nQuestionId then
		pPlayer.CenterMsg("Không biết vấn đề??", true)
		return
	end
	if tbVisitInfo.nResult then
		pPlayer.CenterMsg("Đã trả lời qua", true)
		return
	end
	local bRight = nAnswerIdx == tbVisitInfo.nAnswerIdx
	if bRight then
		local tbAward = self:GetVisitRightAward(pPlayer.nLevel)
		local tbPlayer = {pPlayer.dwID, nVisitPlayerId}
		for _, nPlayerId in ipairs(tbPlayer) do
			local tbMail = {
				To = nPlayerId;
				Title = "Bái phỏng bài thi thưởng";
				From = "Quản lý gia viên";
				Text = "Lần này bái phỏng trả lời vấn đề lúc, ngài cùng ngài hảo hữu tâm hữu linh tê, đáp án nhất trí, đặc biệt cho trở xuống ban thưởng, xin chú ý kiểm tra và nhận phụ kiện!";
				tbAttach = tbAward;
				nLogReazon = Env.LogWay_PartnerCardVisitQuestion;
			};
			Mail:SendSystemMail(tbMail);
		end
	end
	tbVisitData[nIdx].nResult = nAnswerIdx
	self:AddModifyHouseData(pPlayer.dwID)
	
	local nNpcId = self:GetVisitCardNpcId(pPlayer.dwID, nVisitPlayerId, nCardId) or 0
	local pNpc = KNpc.GetById(nNpcId)
	if pNpc then
		pNpc.nResult = nAnswerIdx
	end
	pPlayer.CallClientScript("PartnerCard:OnAnswerVisitQuestion", bRight, nCardId)
	Achievement:AddCount(pPlayer, "Guest_Task3", 1);
	Log("PartnerCard fnAnswerVisitQuestion ok", pPlayer.dwID, pPlayer.szName, pPlayer.nLevel, nVisitPlayerId, nCardId, nQuestionId, nAnswerIdx, tbVisitInfo.nAnswerIdx)
end

function PartnerCard:GetVisitCardNpcId(nBeVisitPlayerId, nVisitPlayerId, nCardId)
	local tbVisitNpc =  PartnerCard.tbPartnerCardNpc[nBeVisitPlayerId] and  PartnerCard.tbPartnerCardNpc[nBeVisitPlayerId].tbVisit
	local tbPlayerVisit = tbVisitNpc and tbVisitNpc[nVisitPlayerId] or {}
	local nNpcId = tbPlayerVisit[nCardId] and tbPlayerVisit[nCardId].nNpcId
	return nNpcId
end

-- 删除玩家家园里的门客Npc
function PartnerCard:DeleteCardHouseNpc(dwID, nCardId)
	local tbLiveNpc = PartnerCard:GetHouseLiveNpcInfo(dwID)
	local nNpcId = tbLiveNpc[nCardId] and tbLiveNpc[nCardId].nNpcId
	if nNpcId then
		local pNpc = KNpc.GetById(nNpcId)
		if pNpc then
			pNpc.Delete()
			tbLiveNpc[nCardId] = nil
		end
	end
end

-- 创建入住家园的门客npc
function PartnerCard:AddCardLiveHouseNpc(dwID, nMapId, nCardId, nMapTemplateId, bCreateMap)
	if not PartnerCard:IsOpen() then
		return 
	end
	local tbCardInfo = self:GetCardInfo(nCardId)
	if not tbCardInfo then
		return
	end
	local tbCardData = self:GetHouseCardData(dwID)
	if not tbCardData or not tbCardData[nCardId] then
		return 
	end
	local pStayInfo = KPlayer.GetPlayerObjById(dwID) or KPlayer.GetRoleStayInfo(dwID)
	if not pStayInfo then
		return 
	end
	PartnerCard.tbPartnerCardNpc[dwID] = PartnerCard.tbPartnerCardNpc[dwID] or {}
	PartnerCard.tbPartnerCardNpc[dwID].tbLive = PartnerCard.tbPartnerCardNpc[dwID].tbLive or {}
	local tbLiveCard = PartnerCard.tbPartnerCardNpc[dwID].tbLive
	local nNpcId = tbLiveCard[nCardId] and tbLiveCard[nCardId].nNpcId
	if nNpcId then
		local pNpc = KNpc.GetById(nNpcId)
		if pNpc then
			pNpc.Delete()
		end
	end
	local nNpcTempleteId = tbCardInfo.nNpcTempleteId
	local nPosX, nPosY = tbCardData[nCardId].nPosX, tbCardData[nCardId].nPosY

	local nNowTime = GetTime()
	local pNpc = KNpc.Add(nNpcTempleteId, 1, 0, nMapId, nPosX, nPosY, 0, 0);
	if pNpc then
		tbLiveCard[nCardId] = {
			nNpcId = pNpc.nId;
			bShow = tbCardData[nCardId].bShow;
		}
		pNpc.nOwnPlayerId = dwID
		pNpc.nCardId = nCardId
		pNpc.szType = PartnerCard.NPC_TYPE_LIVE
		pNpc.nFightMode = 0
		local bShow = PartnerCard:UpdataLiveNpcState(dwID, nCardId)
		self:UpdateLivePosUseInfo(nMapId, nMapTemplateId, nPosX, nPosY)
		local nPartnerTempleteId = tbCardInfo.nPartnerTempleteId or 0
		local _, nQualityLevel = GetOnePartnerBaseInfo(nPartnerTempleteId);
		local nTitleId = PartnerCard.tbQualityTitle[nQualityLevel or 0]
		if nTitleId then
			pNpc.SetTitleID(nTitleId)
		end
		PartnerCard:DoNpcWalk(dwID, nCardId)
		if not bCreateMap then
			KPlayer.MapBoardcastScript(nMapId , "PartnerCard:OnSynHouseLiveNpcInfo", PartnerCard.tbPartnerCardNpc[dwID].tbLive)
		end
		Log("[PartnerCard] fnAddCardLiveHouseNpc Add Npc Ok ", dwID, nNpcTempleteId, nCardId, nMapId, tostring(bShow), pNpc.nId, nPosX, nPosY)
	else
		Log("[PartnerCard] fnAddCardLiveHouseNpc Add Npc Fail ", dwID, nNpcTempleteId, nCardId, nMapId, nPosX, nPosY)
	end
end

function PartnerCard:UpdataLiveNpcState(dwID, nCardId)
	local tbCardData = self:GetHouseCardData(dwID)
	if not tbCardData or not tbCardData[nCardId] then
		return 
	end
	local tbLiveCard = PartnerCard.tbPartnerCardNpc[dwID] and PartnerCard.tbPartnerCardNpc[dwID].tbLive
	local nNpcId = tbLiveCard and tbLiveCard[nCardId] and tbLiveCard[nCardId].nNpcId
	local pNpc = KNpc.GetById(nNpcId or 0)
	if not pNpc then
		return
	end
	local bShow =  tbCardData[nCardId].bShow
	local nActState =  tbCardData[nCardId].nActState
	local nActTime =  tbCardData[nCardId].nActTime or 0
	local nTriggerDevilTime  =  tbCardData[nCardId].nTriggerDevilTime or 0
	-- 隐藏拜访中的门客
	if PartnerCard:IsActing(dwID, nCardId, PartnerCard.CARD_ACT_STATE_VISIT) or PartnerCard:IsActing(dwID, nCardId, PartnerCard.CARD_ACT_STATE_TRIP) then
		bShow = false
	end
	local nNowTime = GetTime()
	if PartnerCard:IsActing(dwID, nCardId, PartnerCard.CARD_ACT_STATE_MUSE) then
		local bRet = PartnerCard:CheckIsDevil(dwID, nCardId)
		local tbDevilInfo = self:GetDevilCardInfo(dwID, nCardId) 
		local nLife = tbDevilInfo.nLife or 0
		if bRet and nLife > 0 then
			self:UpdateHeadState(nNpcId, PartnerCard.EFFECT_DEVIL, nTriggerDevilTime + PartnerCard.nDevilStayTime - nNowTime)
			self:UpdateHeadState(nNpcId, PartnerCard.EFFECT_MUSE)
		else
			self:UpdateHeadState(nNpcId, PartnerCard.EFFECT_MUSE, nActTime + PartnerCard.CARD_ACT_ACTIVE_TIME - nNowTime)
			self:UpdateHeadState(nNpcId, PartnerCard.EFFECT_DEVIL)
		end
	else
		self:UpdateHeadState(nNpcId, PartnerCard.EFFECT_DEVIL)
		self:UpdateHeadState(nNpcId, PartnerCard.EFFECT_MUSE)
	end
	if not bShow then
		pNpc.SetHideNpc(1)
	else
		pNpc.SetHideNpc(0)
		PartnerCard:MapPlayerSynNpc(pNpc.nMapId, {pNpc.nId})
	end
	return bShow
end

function PartnerCard:AddCardVisitHouseNpc(dwID, nVisitPlayerId, nMapId, nCardId, nMapTemplateId)
	local tbCardInfo = self:GetCardInfo(nCardId)
	if not tbCardInfo then
		return
	end
	local tbVisitInfo = PartnerCard:CheckHadVisit(dwID, nVisitPlayerId, nCardId)
	if not tbVisitInfo then
		return 
	end
	PartnerCard.tbPartnerCardNpc[dwID] = PartnerCard.tbPartnerCardNpc[dwID] or {}
	PartnerCard.tbPartnerCardNpc[dwID].tbVisit = PartnerCard.tbPartnerCardNpc[dwID].tbVisit or {}
	PartnerCard.tbPartnerCardNpc[dwID].tbVisit[nVisitPlayerId] = PartnerCard.tbPartnerCardNpc[dwID].tbVisit[nVisitPlayerId] or {}
	local tbPlayerVisit = PartnerCard.tbPartnerCardNpc[dwID].tbVisit[nVisitPlayerId]
	local nNpcId = tbPlayerVisit[nCardId] and tbPlayerVisit[nCardId].nNpcId
	if nNpcId then
		self:DoDeleteVisitNpc(nNpcId)
	end
	local nNpcTempleteId = tbCardInfo.nNpcTempleteId
	local nPosX, nPosY, nPosIdx, nPosType = self:GetVisitPos(nMapId, nMapTemplateId, dwID)
	local pNpc = KNpc.Add(nNpcTempleteId, 1, 0, nMapId, nPosX, nPosY, 0, 0);
	if pNpc then
		tbPlayerVisit[nCardId] = {
			nNpcId = pNpc.nId;
			szBubble = tbVisitInfo.szBubble;
		}
		pNpc.nFightMode = 0
		pNpc.nQuestionId = tbVisitInfo.nQuestionId
		pNpc.nAnswerIdx = tbVisitInfo.nAnswerIdx
		pNpc.nVisitTime = tbVisitInfo.nVisitTime
		pNpc.nVisitPlayerId = tbVisitInfo.nVisitPlayerId
		pNpc.nCardId = tbVisitInfo.nCardId
		pNpc.szBubble = tbVisitInfo.szBubble
		pNpc.nQuesionPlayerId = dwID
		pNpc.szType = PartnerCard.NPC_TYPE_VISIT
		pNpc.nResult = tbVisitInfo.nResult
		pNpc.nVisitPosIdx = nPosIdx
		pNpc.nVisitPosType = nPosType
		pNpc.tbAnswer = tbVisitInfo.tbAnswer
		local pVisitStay = KPlayer.GetPlayerObjById(tbVisitInfo.nVisitPlayerId) or KPlayer.GetRoleStayInfo(tbVisitInfo.nVisitPlayerId)
		local szTitle = string.format("[FAFFA3FF]%s môn khách[-]", pVisitStay and pVisitStay.szName or "")
		pNpc.SetTitle(szTitle)
		KPlayer.MapBoardcastScript(nMapId , "PartnerCard:OnSynHouseVisitNpcInfo", PartnerCard.tbPartnerCardNpc[dwID].tbVisit)
		Log("[PartnerCard] fnAddCardVisitHouseNpc Add Npc Ok ", dwID, nVisitPlayerId, nNpcTempleteId, nCardId, nMapId, pNpc.nId, pNpc.nQuestionId, pNpc.nAnswerIdx, pNpc.nVisitTime, nNpcId or 0)
	else
		Log("[PartnerCard] fnAddCardVisitHouseNpc Add Npc Fail ", dwID, nVisitPlayerId, nNpcTempleteId, nCardId, nMapId, nNpcId or 0)
	end
end

function PartnerCard:CheckHadVisit(dwID, nVisitPlayerId, nCardId)
	local tbVisitData = self:GetVisitCardData(dwID) or {}
	for nIdx, v in ipairs(tbVisitData) do
		if v.nVisitPlayerId == nVisitPlayerId and v.nCardId == nCardId then
			return v, nIdx
		end
	end
end

-- 解锁门客位
function PartnerCard:UnlockCardPos(pPlayer, nCardPos)
	local bRet, szMsg, tbCost = PartnerCard:CanUnlockCardPos(pPlayer, nCardPos)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	if not tbCost then
		pPlayer.CenterMsg("Không thể thông qua nên phương thức giải tỏa", true)
		return
	end
	for _, tbInfo in ipairs(tbCost) do
		local nType = Player.AwardType[tbInfo[1]];
		if nType == Player.award_type_item then
			local nCount = pPlayer.ConsumeItemInBag(tbInfo[2], tbInfo[3], Env.LogWay_UnlockPartnerCardPos);
			if nCount < tbInfo[3] then
				pPlayer.CenterMsg("Khấu trừ đạo cụ thất bại!");
				Log("[PartnerCard] fnUnlockCardPos ConsumeItemInBag Fail !!!", pPlayer.dwID, pPlayer.szAccount, pPlayer.szName, nCardPos, tbInfo[2], tbInfo[3], nCount);
				return;
			end
		elseif nType == Player.award_type_money then
			local bResult = pPlayer.CostMoney(tbInfo[1], tbInfo[2], Env.LogWay_UnlockPartnerCardPos);
			if not bResult then
				pPlayer.CenterMsg("Khấu trừ tiền tệ thất bại!");
				Log("[PartnerCard] fnUnlockCardPos CostMoney Fail !!!", pPlayer.dwID, pPlayer.szAccount, pPlayer.szName, nCardPos, tbInfo[1], tbInfo[2]);
				return;
			end
		end
	end
	bRet = self:DoUnlockCardPos(pPlayer, nCardPos)
	if not bRet then
		pPlayer.CenterMsg("Giải tỏa thất bại", true)
	else
		pPlayer.CenterMsg("Giải tỏa thành công", true)
	end
	pPlayer.CallClientScript("PartnerCard:OnUnlockCardPos")
	Log("PartnerCard fnUnlockCardPos ", pPlayer.dwID, pPlayer.szName, nCardPos, tostring(bRet))
end

function PartnerCard:DoUnlockCardPos(pPlayer, nCardPos)
	local nSaveGroup, nSaveIdx, nBitBegin, nBitEnd = self:GetCardPosLockUserValueSaveIdx(nCardPos);
	if not nSaveGroup then
		Log("PartnerCard fnDoUnlockCardPos ERR ?? ", pPlayer.dwID, pPlayer.szAccount, pPlayer.szName, nCardPos, debug.traceback());
		return false
	end
	local nValue = pPlayer.GetUserValue(nSaveGroup, nSaveIdx);
	nValue = Lib:SetBits(nValue, 1, nBitBegin, nBitEnd);
	pPlayer.SetUserValue(nSaveGroup, nSaveIdx, nValue);
	return true
end

-- 玩家身上存所有拥有的卡片数据
function PartnerCard:SetCardSaveInfo(pPlayer, nCardId, nIdxStep, nValue, tbSaveGroup)
	if nIdxStep > PartnerCard.nMaxSaveCountPer or nIdxStep < 1 then
		return
	end
	local nSaveGroup, nBaseIdx = self:GetCardUserValueSaveIdx(nCardId, tbSaveGroup)
	pPlayer.SetUserValue(nSaveGroup, nBaseIdx + nIdxStep, nValue)
end

-- function PartnerCard:SaveAsynSkillData(pPlayer, tbApplySkill)
-- 	local pAsyncData = KPlayer.GetAsyncData(pPlayer.dwID);
-- 	if not pAsyncData then
-- 		return
-- 	end

-- 	for nIdx = 1, PartnerCard.nAsynMaxUseSkill do
-- 		pAsyncData.SetAsyncBattleValue(PartnerCard.PARTNER_CARD_SKILL_BEGINE_SAVE_ID + nIdx, 0);
-- 	end
-- 	local nCount = 0
-- 	for nSkillId, nSkillLevel in pairs(tbApplySkill) do
-- 		pAsyncData.SetAsyncBattleValue(PartnerCard.PARTNER_CARD_SKILL_BEGINE_SAVE_ID + nCount * 2, nSkillId);
-- 		pAsyncData.SetAsyncBattleValue(PartnerCard.PARTNER_CARD_SKILL_BEGINE_SAVE_ID + nCount * 2 + 1, nSkillLevel);
-- 		nCount = nCount + 1
-- 		if nCount >= 4 then
-- 			break
-- 		end
-- 	end
-- end

-- 异步数据上存所有上阵的门客位信息
function PartnerCard:SetCardPosAsynData(pPlayer, nCardPos, nCardId, nLevel)
	if (not PartnerCard:IsCardPosUnlock(pPlayer, nCardPos)) or (nCardId > 0 and not PartnerCard:IsHaveCard(pPlayer, nCardId)) then
		Log("PartnerCard fnSetCardPosAsynData Valid Param", pPlayer.dwID, pPlayer.szAccount, pPlayer.szName, nCardPos, nCardId, nLevel)
		return 
	end
	local pAsyncData = KPlayer.GetAsyncData(pPlayer.dwID);
	if pAsyncData then
		local nCardIdSaveIdx = PartnerCard:GetAsynPosSaveIdx(nCardPos, PartnerCard.nAsynCardIdIdxStep)
		local nCardLevelIdx = PartnerCard:GetAsynPosSaveIdx(nCardPos, PartnerCard.nAsynCardLevelIdxStep)
		if nCardId and nCardIdSaveIdx then
			pAsyncData.SetAsyncBattleValue(nCardIdSaveIdx, nCardId);
		end
		if nLevel and nCardLevelIdx then
			pAsyncData.SetAsyncBattleValue(nCardLevelIdx, nLevel);
		end
	end
end

-- 门客升级
function PartnerCard:CardUpGrade(pPlayer, nCardId)
	local bRet, szMsg, nUpgradeLevel, nCurExp, nNextLevelNeedExp = PartnerCard:CanCardUpGrade(pPlayer, nCardId)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return
	end
	if not PartnerCard:ReduceCardExp(pPlayer, nCardId, nNextLevelNeedExp, "CardUpGrade") then
		pPlayer.CenterMsg("Tăng cấp thất bại", true)
		Log("[PartnerCard] fnCardUpGrade Fail.", pPlayer.dwID, pPlayer.szName, nCardId, nUpgradeLevel, nCurExp, nNextLevelNeedExp)
		return 
	end
	self:SetCardLevel(pPlayer, nCardId, nUpgradeLevel)
	pPlayer.CallClientScript("PartnerCard:OnCardUpGrade")
	pPlayer.CenterMsg("Tăng cấp thành công", true)
	PartnerCard:CheckCardLevelAchi(pPlayer)
	Log("[PartnerCard] fnCardUpGrade Ok.", pPlayer.dwID, pPlayer.szName, nCardId, nUpgradeLevel, nCurExp, nNextLevelNeedExp)
end

function PartnerCard:SetCardLevel(pPlayer, nCardId, nLevel)
	self:SetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep, nLevel)
	-- 如果门客已经上阵，更新异步数据
	local nCardPos = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nOnPosIdxStep)
	if nCardPos > 0 then
		PartnerCard:SetCardPosAsynData(pPlayer, nCardPos, nCardId, nLevel)
	end
	Log("[PartnerCard] fnSetCardLevel ok.", pPlayer.dwID, pPlayer.szName,  nCardId, nLevel, nCardPos)
end

function PartnerCard:CheckCardLevelAchi(pPlayer)
	local tbOwnCard = PartnerCard:GetAllOwnCard(pPlayer)
	local nCount = 0
	for _, v in ipairs(tbOwnCard) do
		if v.nLevel >= 10 then
			nCount = nCount + 1
		end
	end
	if nCount > 0 then
		-- 拥有n个友好度5星的门客
		Achievement:SetCount(pPlayer, "Guest_Fealty", nCount);
	end
end

-- 门客扣经验
function PartnerCard:ReduceCardExp(pPlayer, nCardId, nReduceExp, szLog)
	if not PartnerCard:IsHaveCard(pPlayer, nCardId) or nReduceExp < 1 then
		return false
	end
	local nCurExp = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep)
	local nAfterReduceExp = math.max(0, nCurExp - nReduceExp)
	self:SetCardSaveInfo(pPlayer, nCardId,  PartnerCard.nExpIdxStep, nAfterReduceExp)
	local nLevel = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep)
	pPlayer.TLog("PartnerCardFlow", PartnerCard.nLogTypeExp, PartnerCard.nLogSubTypeReduceExp, nCardId, nLevel, 0, nCurExp, "", nReduceExp, szLog or "Default")
	Log("[PartnerCard] fnReduceCardExp ok.", pPlayer.dwID, pPlayer.szName, nCardId, nAfterReduceExp, nReduceExp, szLog or "unknow", nLevel)
	return true
end

-- 门客加经验
function PartnerCard:AddCardExp(pPlayer, nCardId, nAddExp, szLog, szTip)
	if not PartnerCard:IsOpen() then
		pPlayer.CenterMsg("Chưa mở tính năng môn khách", true)
		return 
	end
	local tbCardInfo = self:GetCardInfo(nCardId)
	if not tbCardInfo then
		return false
	end
	if not PartnerCard:IsHaveCard(pPlayer, nCardId) or nAddExp < 1 then
		return false
	end
	local nCurExp = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep)
	local nAfterAddExp = nAddExp + nCurExp
	self:SetCardSaveInfo(pPlayer, nCardId,  PartnerCard.nExpIdxStep, nAfterAddExp)
	szTip = szTip or "【Môn khách】%s tăng %d độ thân thiện"
	pPlayer.CenterMsg(string.format(szTip, tbCardInfo.szName, nAddExp), true)
	local nLevel = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep)
	pPlayer.TLog("PartnerCardFlow", PartnerCard.nLogTypeExp, PartnerCard.nLogSubTypeAddExp, nCardId, nLevel, 0, nCurExp, "", nAddExp, szLog or "Default")
	Log("[PartnerCard] fnAddCardExp ok.", pPlayer.dwID, pPlayer.szName, nCardId, nAfterAddExp, nAddExp, szLog or "unknow", nLevel)
	return true
end

-- 给门客送礼
function PartnerCard:SendGift(pPlayer, nCardId, nItemId, nCount)
	local bRet, szMsg, nAddExp = PartnerCard:CanSendGift(pPlayer, nCardId, nItemId, nCount)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	local nRet = pPlayer.ConsumeItemInAllPos(nItemId, nCount, Env.LogWay_PartnerCardSendGift)
	if nRet < nCount then
		pPlayer.CenterMsg("Khấu trừ đạo cụ thất bại!", true)
		Log("PartnerCard fnSendGift Consume Item Fail!!", pPlayer.dwID, pPlayer.szName, nCardId, nItemId, nCount, nRet, nAddExp)
		return
	end
	local nCurExp = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nExpIdxStep)
	if not self:AddCardExp(pPlayer, nCardId, nAddExp, "SendGift", "Tặng thành công,【Môn khách】%s tăng %d độ thân thiện") then
		Log("PartnerCard fnSendGift AddExp Fail!!", pPlayer.dwID, pPlayer.szName, nCardId, nItemId, nCount, nRet, nAddExp)
		return
	end
	self:AddCardSendTime(pPlayer, nCardId, nCount)
	self:SynCardGiftData(pPlayer)
	local nLevel = PartnerCard:GetCardSaveInfo(pPlayer, nCardId, PartnerCard.nLevelIdxStep)
	pPlayer.TLog("PartnerCardFlow", PartnerCard.nLogTypeGift, 0, nCardId, nLevel, 0, nCurExp, "", nAddExp)
	Log("PartnerCard fnSendGift ok.", pPlayer.dwID, pPlayer.szName, nCardId, nItemId, nCount, nAddExp, nLevel)
end

function PartnerCard:AddCardSendTime(pPlayer, nCardId, nCount)
	self:CheckResetGiftTimes(pPlayer)
	local tbData = pPlayer.GetScriptTable("PartnerCardGift");
	tbData.tbCardGiftData = tbData.tbCardGiftData or {}
	tbData.tbCardGiftData.tbCardTimes = tbData.tbCardGiftData.tbCardTimes or {}
	tbData.tbCardGiftData.tbCardTimes[nCardId] = (tbData.tbCardGiftData.tbCardTimes[nCardId] or 0) + nCount
end

function PartnerCard:GetCardSendTimes(pPlayer, nCardId)
	self:CheckResetGiftTimes(pPlayer)
	local tbData = pPlayer.GetScriptTable("PartnerCardGift");
	local tbCardGiftData = tbData.tbCardGiftData or {}
	local tbCardTimes = tbCardGiftData.tbCardTimes or {}
	local nSendTime = tbCardTimes[nCardId] or 0
	return nSendTime
end

function PartnerCard:CheckResetGiftTimes(pPlayer)
	local tbData = pPlayer.GetScriptTable("PartnerCardGift");
	tbData.tbCardGiftData = tbData.tbCardGiftData or {}
	local tbCardGiftData = tbData.tbCardGiftData
	local nToday = Lib:GetLocalDay();
	if PartnerCard.bGiftTimesReset and (not tbCardGiftData.nUpdateDay or nToday ~= tbCardGiftData.nUpdateDay) then
		tbCardGiftData.tbCardTimes = nil
		tbCardGiftData.nUpdateDay = nToday
	end
end

function PartnerCard:LiveHouse(pPlayer, nCardId)
	local tbCardData = self:GetHouseCardData(pPlayer.dwID)
	if not tbCardData then
		pPlayer.CenterMsg("Mời trước thu hoạch được gia viên", true)
		return
	end
	local tbMapInfo = self:GetHouseMapInfo(pPlayer.dwID)
	if not tbMapInfo then
		pPlayer.CenterMsg("Tại gia viên của mình mới có thể thao tác", true)
		return 
	end
	local bRet, szMsg = PartnerCard:CheckLiveHouse(pPlayer, nCardId)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	local nMapId, nPosX, nPosY
	nPosX, nPosY= PartnerCard:GetLivePos(tbMapInfo.nMapId, tbMapInfo.nMapTemplateId)
	if not nPosX then
		nMapId, nPosX, nPosY = pPlayer.GetWorldPos()
	end
	tbCardData[nCardId] = {
		bShow = true,
		nActState = PartnerCard.CARD_ACT_STATE_NONE,
		nPosX = nPosX,
		nPosY = nPosY,

	}
	self:AddModifyHouseData(pPlayer.dwID)
	self:SynCardHouseData(pPlayer, {[nCardId] = tbCardData[nCardId]})
	self:RandomActTypeIdx(pPlayer.dwID, nCardId)
	self:SynActType(pPlayer)
	self:AddCardLiveHouseNpc(pPlayer.dwID, tbMapInfo.nMapId, nCardId, tbMapInfo.nMapTemplateId)
	pPlayer.CallClientScript("PartnerCard:OnLiveHouse", nCardId)
	pPlayer.CenterMsg("Vào ở thành công", true)
	Task:DoAddExtPoint(pPlayer, PartnerCard.nLiveTaskId, 1)
	PartnerCard:CheckLiveHouseAchi(pPlayer)
end

function PartnerCard:CheckLiveHouseAchi(pPlayer)
	local tbCardData = self:GetHouseCardData(pPlayer.dwID)
	if not tbCardData then
		return
	end
	local nCount = Lib:CountTB(tbCardData)
	if nCount >= 4 then
		-- 同时有n个门客入住自己的家园
		Achievement:AddCount(pPlayer, "Guest_Defend", 1);
	end
end

-- 家园地图是否已经创建
function PartnerCard:GetHouseMapInfo(dwID)
	local tbMapInfo = House.tbHouseMapInfo[dwID];
	if tbMapInfo and tbMapInfo.bLoadFinish and tbMapInfo.nMapId then
		return tbMapInfo
	end
end

function PartnerCard:AddModifyHouseData(dwID)
	House:MarkDirty(dwID)
end

function PartnerCard:LeaveHouse(pPlayer, nCardId)
	local bRet, szMsg = PartnerCard:CheckLeaveHouse(pPlayer, nCardId)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	local tbCardData = self:GetHouseCardData(pPlayer.dwID)
	if not tbCardData then
		pPlayer.CenterMsg("Mời trước thu hoạch được gia viên", true)
		return
	end
	self:DoLeaveHouse(pPlayer, nCardId, tbCardData)
	self:RemoveRandomActTypeIdx(pPlayer.dwID, nCardId)
	self:SynActType(pPlayer)
	self:DeleteCardHouseNpc(pPlayer.dwID, nCardId)
	pPlayer.CenterMsg("Rút lui thành công", true)
	return true
end

function PartnerCard:DoLeaveHouse(pPlayer, nCardId, tbCardData)
	local tbMapInfo = self:GetHouseMapInfo(pPlayer.dwID)
	if tbMapInfo then
		PartnerCard:RemoveLivePos(tbMapInfo.nMapId, tbMapInfo.nMapTemplateId, tbCardData[nCardId].nPosX, tbCardData[nCardId].nPosY)
	end
	tbCardData[nCardId] = nil
	self:AddModifyHouseData(pPlayer.dwID)
	self:SynCardHouseData(pPlayer, {[nCardId] = "nil"})
	pPlayer.CallClientScript("PartnerCard:OnLeaveHouse", nCardId)
end

function PartnerCard:UpdateHouseCardShow(pPlayer, tbFlag)
	local bRet, szMsg = PartnerCard:CheckHouseOperation(pPlayer)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	local tbCardData = self:GetHouseCardData(pPlayer.dwID)
	if not tbCardData then
		return 
	end
	local tbLiveNpc = PartnerCard:GetHouseLiveNpcInfo(pPlayer.dwID)
	--local tbShowNpc = {}
	for nCardId, v in pairs(tbCardData) do
		if not tbFlag[nCardId] then
			v.bShow = nil
		else
			v.bShow = true
		end
		local nHide = v.bShow and 0 or 1
		local nNpcId = tbLiveNpc[nCardId] and tbLiveNpc[nCardId].nNpcId
		if nNpcId then
			local pNpc = KNpc.GetById(nNpcId)
			if pNpc then
				tbLiveNpc[nCardId].bShow = v.bShow
				PartnerCard:UpdataLiveNpcState(pPlayer.dwID, nCardId)
			end
		end
	end
	local tbMapInfo = self:GetHouseMapInfo(pPlayer.dwID)
	if tbMapInfo then
		KPlayer.MapBoardcastScript(tbMapInfo.nMapId , "PartnerCard:OnSynHouseLiveNpcInfo", tbLiveNpc)
	end
	PartnerCard:AddModifyHouseData(pPlayer.dwID)
	self:SynCardHouseData(pPlayer)
end

function PartnerCard:MapPlayerSynNpc(nMapId, tbShowNpc)
	self:MapPalyerExecute(nMapId, function (self, pPlayer, tbNpcId)
			for _, nNpcId in ipairs(tbNpcId) do
				pPlayer.SyncNpc(nNpcId)
			end
		end, tbShowNpc)
end

function PartnerCard:MapPalyerExecute(nMapId, fnExe, ...)
	local tbPlayer = KPlayer.GetMapPlayer(nMapId)
	for _, pPlayer in pairs(tbPlayer) do
		Lib:CallBack({fnExe, self, pPlayer, ...});
	end
end

function PartnerCard:SynCardHouseData(pPlayer, tbData)
	PartnerCard:UpdateAllLiveNpcState(pPlayer.dwID)
	local tbSynData = tbData or self:GetHouseCardData(pPlayer.dwID)
	pPlayer.CallClientScript("PartnerCard:OnSynCardHouseData", tbSynData)
end

-- 门客数据
function PartnerCard:GetHouseData(dwID)
	local tbHouse = House:GetHouse(dwID)
	if not tbHouse then
		return 
	end
	tbHouse.tbPartnerCard = tbHouse.tbPartnerCard  or {}
	return tbHouse.tbPartnerCard
end

-- 入住数据
function PartnerCard:GetHouseCardData(dwID)
	local tbPartnerCard = self:GetHouseData(dwID)
	if not tbPartnerCard then
		return 
	end
	tbPartnerCard.tbCard = tbPartnerCard.tbCard or {}
	return tbPartnerCard.tbCard
end

-- 拜访数据
function PartnerCard:GetVisitCardData(dwID)
	local tbPartnerCard = self:GetHouseData(dwID)
	if not tbPartnerCard then
		return 
	end
	tbPartnerCard.tbVisitCard = tbPartnerCard.tbVisitCard or {}
	if next(tbPartnerCard.tbVisitCard) then
		local bAlter = self:CheckVisitData(tbPartnerCard.tbVisitCard, dwID)
		if bAlter then
			self:AddModifyHouseData(dwID)
		end
	end
	return tbPartnerCard.tbVisitCard
end

-- 任务数据
function PartnerCard:GetTaskCardData(dwID)
	local tbPartnerCard = self:GetHouseData(dwID)
	if not tbPartnerCard then
		return 
	end
	tbPartnerCard.tbTask = tbPartnerCard.tbTask or {}
	return tbPartnerCard.tbTask
end

function PartnerCard:SynTaskCardData(pPlayer)
	local tbTaskData = PartnerCard:GetTaskCardData(pPlayer.dwID) or {}
	pPlayer.CallClientScript("PartnerCard:OnSynTaskData", tbTaskData)
end

function PartnerCard:SynActData(pPlayer)
	self:SynCardHouseData(pPlayer)
	self:SynTaskCardData(pPlayer)
	self:SynActType(pPlayer)
	pPlayer.CallClientScript("PartnerCard:OnSynActData")
end

function PartnerCard:AcceptTask(pPlayer, nCardId)
	local bRet, szMsg, tbTaskData = PartnerCard:CheckAcceptTask(pPlayer, nCardId)
	if not bRet then
		pPlayer.CenterMsg(szMsg, true)
		return 
	end
	local tbTaskId = PartnerCard:RandomTask(pPlayer, nCardId)
	if not tbTaskId or not next(tbTaskId) then
		pPlayer.CenterMsg("Không biết nhiệm vụ", true)
		return 
	end
	tbTaskData.tbTaskId = tbTaskId
	tbTaskData.nUpdateTime = GetTime()
	tbTaskData.nCardId = nCardId
	tbTaskData.nFinishTaskIdx = 0
	PartnerCard:AddModifyHouseData(pPlayer.dwID)
	Task:ForceAcceptTask(pPlayer, tbTaskId[1])
	pPlayer.CenterMsg("Xác nhận nhiệm vụ thành công", true)
	self:SynTaskCardData(pPlayer)
end

function PartnerCard:RefreshTaskFinishIdx(pPlayer)
	local tbTaskData = PartnerCard:GetTaskCardData(pPlayer.dwID)
	if not tbTaskData then
		return
	end
	local tbTaskId = tbTaskData.tbTaskId or {}
	local nFinishTaskIdx = 0
	if next(tbTaskId) then
		local tbAllTask = PartnerCard:GetAllTask(pPlayer)
		local nCurTaskId = tbAllTask[1] or 0
		for nIdx, nTaskId in ipairs(tbTaskId) do
			if nTaskId == nCurTaskId then
				break
			end
			nFinishTaskIdx = nFinishTaskIdx + 1
		end
	end
	tbTaskData.nFinishTaskIdx = nFinishTaskIdx
	PartnerCard:AddModifyHouseData(pPlayer.dwID)
end

function PartnerCard:OnFinishTask(pPlayer, nTaskId)
	local tbTask = Task:GetTask(nTaskId);
	if not tbTask then
		Log("PartnerCard fnOnFinishTask no task", pPlayer.dwID, pPlayer.szName, nTaskId)
		return
	end
	if Task.TASK_TYPE_PARTNERCARD ~= tbTask.nTaskType then
		return
	end
	local tbTaskData = PartnerCard:GetTaskCardData(pPlayer.dwID)
	if not tbTaskData then
		Log("PartnerCard fnGetNextTaskId fail", pPlayer.dwID, pPlayer.szName, nTaskId)
		return 
	end
	local nCardId = tbTaskData.nCardId
	local nQualityLevel = PartnerCard:GetQualityByCardId(nCardId)
	local nAddExp = PartnerCard.tbTaskExp[nQualityLevel] or 0
	if nAddExp > 0 then
		local bRet = PartnerCard:AddCardExp(pPlayer, nCardId, nQualityLevel * nAddExp, "FinishTask")
		if not bRet then
			Log("PartnerCard fnOnFinishTask add exp fail", nTaskId, nAddExp)
		end
	end
	tbTaskData.nFinishTaskIdx = (tbTaskData.nFinishTaskIdx or 0) + 1
	PartnerCard:AddModifyHouseData(pPlayer.dwID)
	PartnerCard:SynTaskCardData(pPlayer)
	local nNextTaskId = self:GetNextTaskId(pPlayer, tbTaskData.tbTaskId, nTaskId)
	if nNextTaskId then
		Task:ForceAcceptTask(pPlayer, nNextTaskId)
	else
		pPlayer.CenterMsg("Hôm nay môn khách nhiệm vụ đã hoàn thành!", true)
		pPlayer.CallClientScript("PartnerCard:OnFinishTask")
	end
	Log("PartnerCard fnOnFinishTask ..", pPlayer.dwID, pPlayer.szName, nCardId, nQualityLevel, nAddExp, nNextTaskId or 0)
end

function PartnerCard:DoDeleteVisitNpc(nNpcId)
	local pNpc = KNpc.GetById(nNpcId)
	if pNpc then
		self:RemoveUsePos(pNpc.nMapId, pNpc.nVisitPosType, pNpc.nVisitPosIdx)
		pNpc.Delete()
	end
end

function PartnerCard:CheckVisitData(tbVisitCard, dwID)
	local bAlter
	local nNowTime = GetTime()
	for i=#tbVisitCard, 1, -1 do
		local nVisitTime = tbVisitCard[i].nVisitTime or 0
		if nNowTime - nVisitTime >= PartnerCard.CARD_ACT_ACTIVE_TIME then
			if dwID then
				local nNpcId = PartnerCard:GetVisitCardNpcId(dwID, tbVisitCard[i].nVisitPlayerId,  tbVisitCard[i].nCardId)
				if nNpcId then
					self:DoDeleteVisitNpc(nNpcId)
				end
				table.remove(tbVisitCard, i)
			end
			bAlter = true
		end
	end
	return bAlter
end

function PartnerCard:GetHouseLiveNpcInfo(dwID)
	local tbHousePlayerNpc = PartnerCard.tbPartnerCardNpc[dwID] or {}
	return tbHousePlayerNpc.tbLive or {}
end

function PartnerCard:GetHouseVisitNpcInfo(dwID)
	local tbHousePlayerNpc = PartnerCard.tbPartnerCardNpc[dwID] or {}
	return tbHousePlayerNpc.tbVisit or {}
end

function PartnerCard:OnCreateHouseMap(nOwnPlayerId, nMapId, nMapTemplateId)
	local tbCardData = self:GetHouseCardData(nOwnPlayerId)
	if not tbCardData then
		return 
	end
	PartnerCard.tbUsePosInfo[nMapId] = nil
	-- 入住门客
	for nCardId in pairs(tbCardData) do
		self:AddCardLiveHouseNpc(nOwnPlayerId, nMapId, nCardId, nMapTemplateId, true)
	end
	-- 参访门客
	local tbVisitData = PartnerCard:GetVisitCardData(nOwnPlayerId)
	for _, v in pairs(tbVisitData) do
		self:AddCardVisitHouseNpc(nOwnPlayerId, v.nVisitPlayerId, nMapId, v.nCardId, nMapTemplateId)
	end
end

function PartnerCard:OnDestroyHouseMap(nOwnPlayerId, nMapId)
	PartnerCard.tbPartnerCardNpc[nOwnPlayerId] = nil
	PartnerCard.tbUsePosInfo[nMapId] = nil
end

function PartnerCard:UpdateAllLiveNpcState(dwOwnerId)
	local tbLive = PartnerCard:GetHouseLiveNpcInfo(dwOwnerId)
	for nCardId, v in pairs(tbLive) do
		PartnerCard:UpdataLiveNpcState(dwOwnerId, nCardId)
	end
end

function PartnerCard:WakeUpAllLiveNpc(dwOwnerId)
	local tbLive = PartnerCard:GetHouseLiveNpcInfo(dwOwnerId)
	for nCardId, v in pairs(tbLive) do
		local nNpcId = v.nNpcId or 0
		local pNpc = KNpc.GetById(nNpcId)
		if pNpc and pNpc.bSleep then
			pNpc.bSleep = nil
			PartnerCard:DoNpcWalk(dwOwnerId, nCardId)
		end
	end
end

function PartnerCard:OnEnterHouseMap(pPlayer, dwOwnerId, nMapId)
	self:SynHouseLiveNpcInfo(pPlayer, dwOwnerId)
	self:SynHouseVisitNpcInfo(pPlayer, dwOwnerId)
	self:UpdateAllLiveNpcState(dwOwnerId)
	-- 每次玩家进入地图尝试唤醒npc走动
	self:WakeUpAllLiveNpc(dwOwnerId)
	self:SynCardHouseData(pPlayer)
	pPlayer.CallClientScript("PartnerCard:OnHouseMapEnter")
end

function PartnerCard:SynHouseLiveNpcInfo(pPlayer, dwOwnerId)
	local tbNpcData = PartnerCard:GetHouseLiveNpcInfo(dwOwnerId)
	pPlayer.CallClientScript("PartnerCard:OnSynHouseLiveNpcInfo", tbNpcData)
end

function PartnerCard:SynHouseVisitNpcInfo(pPlayer, dwOwnerId)
	local tbVisitNpcData = PartnerCard:GetHouseVisitNpcInfo(dwOwnerId)
	pPlayer.CallClientScript("PartnerCard:OnSynHouseVisitNpcInfo", tbVisitNpcData)
end

function PartnerCard:OnLeaveHouseMap(pPlayer, dwOwnerId, nMapId)
	pPlayer.CallClientScript("PartnerCard:OnHouseMapLeave")
end

function PartnerCard:OnLoginHouseMap(pPlayer, dwOwnerId, nMapId)
	self:SynHouseLiveNpcInfo(pPlayer, dwOwnerId)
	self:SynHouseVisitNpcInfo(pPlayer, dwOwnerId)
	self:UpdateAllLiveNpcState(dwOwnerId)
	self:SynCardHouseData(pPlayer)
	pPlayer.CallClientScript("PartnerCard:OnHouseMapLogin")
end

function PartnerCard:UpdateHeadState(nNpcId, nEffectId, nTime)
	local pNpc = KNpc.GetById(nNpcId)
	if not pNpc then
		return
	end
	if nTime then
		pNpc.AddSkillState(nEffectId, 1, FightSkill.STATE_TIME_TYPE.state_time_normal, nTime * Env.GAME_FPS, 0, 1);
	else
		pNpc.RemoveSkillState(nEffectId);	
	end
end

function PartnerCard:InvitePlayer2TripFuben(pPlayer, nPlayerId)
	PartnerCard.tbTripFuben:InvitePlayer(pPlayer, nPlayerId)
end

function PartnerCard:InviteApply2TripFuben(pPlayer, nPlayerId)
	PartnerCard.tbTripFuben:InviteApply(pPlayer, nPlayerId)
end

function PartnerCard:RandomInvite2TripFuben(pPlayer)
	PartnerCard.tbTripFuben:RandomInvite(pPlayer)
end

function PartnerCard:GoLiveNpc(pPlayer, nCardId)
	local tbCardData = self:GetHouseCardData(pPlayer.dwID)
	if not tbCardData or not tbCardData[nCardId] then
		pPlayer.CenterMsg("Này môn khách còn không có vào ở gia viên", true)
		return 
	end
	if not House:IsInOwnHouse(pPlayer) then
		pPlayer.CenterMsg("Tại gia viên của mình mới có thể thao tác", true)
		return 
	end
	local tbLive = PartnerCard:GetHouseLiveNpcInfo(pPlayer.dwID)
	local nNpcId = tbLive[nCardId] and tbLive[nCardId].nNpcId
	if not nNpcId then
		pPlayer.CenterMsg("Tìm không thấy npc", true)
		return 
	end
	local nPosX = tbCardData[nCardId].nPosX
	local nPosY = tbCardData[nCardId].nPosY
	if not nPosX or not nPosY then
		pPlayer.CenterMsg("Tìm không thấy vị trí", true)
		return
	end
	pPlayer.CallClientScript("PartnerCard:OnGoPos", pPlayer.nMapId, nNpcId, nPosX, nPosY)
end

PartnerCard.tbPlayerActType = PartnerCard.tbPlayerActType or {}

function PartnerCard:SynActType(pPlayer)
	pPlayer.CallClientScript("PartnerCard:OnSynActType", PartnerCard:GetRandomActTypeData(pPlayer.dwID))
end

function PartnerCard:RandomActTypeIdx(dwID, nCardId)
	local tbRandomTypeData = self:GetRandomActTypeData(dwID)
	if not tbRandomTypeData then
		return
	end
	local tbUseRandomType = tbRandomTypeData.tbUseRandomType
	if tbUseRandomType[nCardId] then
		return
	end
	local tbRandomType =  tbRandomTypeData.tbRandomType
	local tbUnuseRandomType = {}
	for nIdx in ipairs(tbRandomType) do
		local bUse  
		for _, nUseIdx in pairs(tbUseRandomType) do
			if nIdx == nUseIdx then
				bUse = true
				break
			end
		end
		if not bUse then
			table.insert(tbUnuseRandomType, nIdx)
		end
	end
	local nRandomIdx
	if next(tbUnuseRandomType) then
		nRandomIdx = tbUnuseRandomType[MathRandom(#tbUnuseRandomType)]
		tbUseRandomType[nCardId] = nRandomIdx
	end
end

function PartnerCard:RemoveRandomActTypeIdx(dwID, nCardId)
	local tbRandomTypeData = self:GetRandomActTypeData(dwID)
	if not tbRandomTypeData then
		return
	end
	tbRandomTypeData.tbUseRandomType[nCardId] = nil
end

function PartnerCard:RandomLiveCardActType(dwID)
	local tbCardData = self:GetHouseCardData(dwID)
	if not tbCardData then
		return 
	end
	-- 尝试给已经入住的门客分配
	for nCardId in pairs(tbCardData) do
		PartnerCard:RandomActTypeIdx(dwID, nCardId)
	end
end
function PartnerCard:GetRandomActTypeData(dwID)
	local nHouseLevel = PartnerCard:GetHouseLevel(dwID)
	if nHouseLevel < 1 then
		return
	end
	local nMaxActTimes = PartnerCard:GetMaxActTimes(dwID)
	if nMaxActTimes < 1 then
		return
	end 
	PartnerCard.tbPlayerActType[dwID] = PartnerCard.tbPlayerActType[dwID] or {}
	PartnerCard.tbPlayerActType[dwID].tbUseRandomType = PartnerCard.tbPlayerActType[dwID].tbUseRandomType or {}
	local nRandomTime = PartnerCard.tbPlayerActType[dwID].nRandomTime or 0
	local nNowTime = GetTime()
	if Lib:IsDiffDay(0, nRandomTime) then
		PartnerCard.tbPlayerActType[dwID].tbUseRandomType = {}
		PartnerCard.tbPlayerActType[dwID].tbRandomType = {}
		PartnerCard.tbPlayerActType[dwID].nRandomTime = nNowTime
		for i = 1, nMaxActTimes do
			-- n种类型
			local nActCount = MathRandom(PartnerCard.CARD_ACT_STATE_NONE + 1, PartnerCard.CARD_ACT_STATE_END - 1)
			local tbActType = {}
			local fnSelect = Lib:GetRandomSelect(PartnerCard.CARD_ACT_STATE_END - 1)
			for j = 1, nActCount do
				local nActType = fnSelect()
				table.insert(tbActType, nActType)
			end
			table.insert(PartnerCard.tbPlayerActType[dwID].tbRandomType, tbActType)
		end
		PartnerCard:RandomLiveCardActType(dwID)
	end
	return PartnerCard.tbPlayerActType[dwID]
end

function PartnerCard:GoPlayerHouseCardPos(pPlayer, nOwnerId, nCardId)
	local tbCardData = self:GetHouseCardData(nOwnerId)
	if not tbCardData or not tbCardData[nCardId] then
		pPlayer.CenterMsg("Tạm thời không thể tiến về", true)
		return 
	end
	local nMapId
	local tbLive = PartnerCard:GetHouseLiveNpcInfo(nOwnerId) or {}
	local nNpcId = tbLive[nCardId] and tbLive[nCardId].nNpcId
	local pNpc = KNpc.GetById(nNpcId or 0)
	local nPosX = tbCardData[nCardId].nPosX or 0
	local nPosY = tbCardData[nCardId].nPosY or 0
	if pNpc then
		nMapId, nPosX, nPosY = pNpc.GetWorldPos()
	end
	local nHouseMapId = House:GetHouseMap(nOwnerId)
	if nHouseMapId == pPlayer.nMapId then
		pPlayer.CallClientScript("PartnerCard:GoHousePos", nHouseMapId, nPosX, nPosY);
		return
	end
	House:EnterHouse(pPlayer, nOwnerId, {nPosX,nPosY}, function (pPlayer, nMapId, nX, nY)
		pPlayer.CallClientScript("PartnerCard:GoHousePos", nMapId, nX, nY);
	end )
end

function PartnerCard:OnAcceptTask(nTaskId)
	if nTaskId == PartnerCard.nLiveTaskId then
		local tbCardData = self:GetHouseCardData(me.dwID) or {}
		if next(tbCardData) then
			Task:DoAddExtPoint(me, PartnerCard.nLiveTaskId, 1)
		end

	elseif nTaskId == PartnerCard.nUpPosTaskId then
		if PartnerCard:IsHaveCardOnPos(me) then
			Task:DoAddExtPoint(me, PartnerCard.nUpPosTaskId, 1)
		end
	end
end

function PartnerCard:ActivityTask(pPlayer)
	House:EnterHouse(pPlayer, pPlayer.dwID, nil, nil, nil, function (pPlayer)
     	pPlayer.CallClientScript("Ui:OpenWindow", "PartnerCardActivityPanel")
    end);
end

PlayerEvent:RegisterGlobal("AcceptTask", PartnerCard.OnAcceptTask, PartnerCard)